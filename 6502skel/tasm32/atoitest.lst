0001   0000             ;
0002   0000             ; To assembly this, either use the zxasm.bat file:
0003   0000             ;
0004   0000             ; zxasm hello
0005   0000             ;
0006   0000             ; or... assemble with the following options:
0007   0000             ;
0008   0000             ; tasm -80 -b -s hello.asm hello.p
0009   0000             ;
0010   0000             ;==============================================
0011   0000             ;    ZX81 assembler 'Hello World' 
0012   0000             ;==============================================
0013   0000             ;
0014   0000             ;defs
0015   0000             #include "zx81defs.asm"
0001+  0000             ;defines to make us feel more at home
0002+  0000             #define         DEFB .BYTE
0003+  0000             #define         DEFW .WORD
0004+  0000             #define         DEFM .TEXT
0005+  0000             #define         ORG  .ORG
0006+  0000             #define         EQU  .EQU
0016   0000             ;EQUs for ROM routines
0017   0000             #include "zx81rom.asm"
0001+  0000             ;ZX81 ROM routines
0002+  0000             PRINT			EQU $10
0003+  0000             PRINTAT			EQU $08F5
0004+  0000             DISPROUT		EQU $0281
0005+  0000             DISPLAY_3		EQU $0292 ;restore registers after a 'slow' display
0006+  0000             DISPLAY_5		EQU $02B5
0007+  0000             PLOT			EQU $0BB2 	; note ROM plot is 0baf - however first thing it does try to pull BC from the calculator stack
0008+  0000             							; so we'll skip past that and set BC ourselves
0009+  0000             CLS				EQU $0A2A
0010+  0000             KSCAN           EQU $02BB 
0011+  0000             FINDCHR         EQU $07BD
0012+  0000             COPY            EQU $0869
0013+  0000             FAST            EQU $0F23
0014+  0000             SLOW            EQU $0F2B
0015+  0000             SLOWORFAST		EQU $0207
0016+  0000             ;sys vars
0017+  0000             ERR_NR			EQU $40000018   0000             ;ZX81 char codes/how to survive without ASCII
0019   0000             #include "charcodes.asm"
0001+  0000             ; ZX81 Characters.
0002+  0000             __:				EQU	$00	;spacja
0003+  0000             _QT:			EQU	$0B	;"
0004+  0000             _PD:			EQU	$0C	;funt
0005+  0000             _SD:			EQU	$0D	;$
0006+  0000             _CL:			EQU	$0E	;:
0007+  0000             _QM:			EQU	$0F	;?
0008+  0000             _OP:			EQU	$10	;(
0009+  0000             _CP:			EQU	$11	;)
0010+  0000             _GT:			EQU	$12	;>
0011+  0000             _LT:			EQU	$13	;<
0012+  0000             _EQ:			EQU	$14	;=
0013+  0000             _PL:			EQU	$15	;+
0014+  0000             _MI:			EQU	$16	;-
0015+  0000             _AS:			EQU	$17	;*
0016+  0000             _SL:			EQU	$18	;/
0017+  0000             _SC:			EQU	$19	;;
0018+  0000             _CM:			EQU	$1A	;,
0019+  0000             _DT:			EQU	$1B	;.
0020+  0000             _NL:			EQU	$76	;NEWLINE
0021+  0000             
0022+  0000             _0				EQU $1C
0023+  0000             _1				EQU $1D
0024+  0000             _2				EQU $1E
0025+  0000             _3				EQU $1F
0026+  0000             _4				EQU $20
0027+  0000             _5				EQU $21
0028+  0000             _6				EQU $22
0029+  0000             _7				EQU $23
0030+  0000             _8				EQU $24
0031+  0000             _9				EQU $25
0032+  0000             _A				EQU $26
0033+  0000             _B				EQU $27
0034+  0000             _C				EQU $28
0035+  0000             _D				EQU $29
0036+  0000             _E				EQU $2A
0037+  0000             _F				EQU $2B
0038+  0000             _G				EQU $2C
0039+  0000             _H				EQU $2D
0040+  0000             _I				EQU $2E
0041+  0000             _J				EQU $2F
0042+  0000             _K				EQU $30
0043+  0000             _L				EQU $31
0044+  0000             _M				EQU $32
0045+  0000             _N				EQU $33
0046+  0000             _O				EQU $34
0047+  0000             _P				EQU $35
0048+  0000             _Q				EQU $36
0049+  0000             _R				EQU $37
0050+  0000             _S				EQU $38
0051+  0000             _T				EQU $39
0052+  0000             _U				EQU $3A
0053+  0000             _V				EQU $3B
0054+  0000             _W				EQU $3C
0055+  0000             _X				EQU $3D
0056+  0000             _Y				EQU $3E
0057+  0000             _Z				EQU $3F
0020   0000             ;system variables
0021   0000             #include "zx81sys.asm"
0001+  0000             ;system variables
0002+  0000             ;Origin of a ZX81 file is always 16393
0003+  0000             
0004+  4009                             ORG 16393
0005+  4009                             
0006+  4009             ; System variables live here
0007+  4009 00          VERSN:          DEFB 0
0008+  400A 02 00       E_PPC:          DEFW 2
0009+  400C 30 41       D_FILE:         DEFW Display
0010+  400E 31 41       DF_CC:          DEFW Display+1                  ; First character of display
0011+  4010 49 44       VARS:           DEFW Variables
0012+  4012 00 00       DEST:           DEFW 0
0013+  4014 4A 44       E_LINE:         DEFW BasicEnd 
0014+  4016 4E 44       CH_ADD:         DEFW BasicEnd+4                 ; Simulate SAVE "X"
0015+  4018 00 00       X_PTR:          DEFW 0
0016+  401A 4F 44       STKBOT:         DEFW BasicEnd+5
0017+  401C 4F 44       STKEND:         DEFW BasicEnd+5                 ; Empty stack
0018+  401E 00          BREG:           DEFB 0
0019+  401F 5D 40       MEM:            DEFW MEMBOT
0020+  4021 00          UNUSED1:        DEFB 0
0021+  4022 02          DF_SZ:          DEFB 2
0022+  4023 02 00       S_TOP:          DEFW $0002                      ; Top program line number
0023+  4025 BF FD       LAST_K:         DEFW $fdbf
0024+  4027 0F          DEBOUN:         DEFB 15
0025+  4028 37          MARGIN:         DEFB 55
0026+  4029 1E 41       NXTLIN:         DEFW Line2                      ; Next line address
0027+  402B 00 00       OLDPPC:         DEFW 0
0028+  402D 00          FLAGX:          DEFB 0
0029+  402E 00 00       STRLEN:         DEFW 0
0030+  4030 8D 0C       T_ADDR:         DEFW $0c8d
0031+  4032 00 00       SEED:           DEFW 0
0032+  4034 A3 F5       FRAMES:         DEFW $f5a3
0033+  4036 00 00       COORDS:         DEFW 0
0034+  4038 BC          PR_CC:          DEFB $bc
0035+  4039 21 18       S_POSN:         DEFW $1821
0036+  403B 40          CDFLAG:         DEFB $40
0037+  403C 00 00 00 00 PRBUFF:         DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,$76 ; 32 Spaces + Newline
0037+  4040 00 00 00 00 
0037+  4044 00 00 00 00 
0037+  4048 00 00 00 00 
0037+  404C 00 00 00 00 
0037+  4050 00 00 00 00 
0037+  4054 00 00 00 00 
0037+  4058 00 00 00 00 
0037+  405C 76 
0038+  405D 00 00 00 00 MEMBOT:         DEFB 0,0,0,0,0,0,0,0,0,0,$84,$20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 30 zeros
0038+  4061 00 00 00 00 
0038+  4065 00 00 84 20 
0038+  4069 00 00 00 00 
0038+  406D 00 00 00 00 
0038+  4071 00 00 00 00 
0038+  4075 00 00 00 00 
0038+  4079 00 00 
0039+  407B 00 00       UNUNSED2:       DEFW 0
0040+  407D             
0041+  407D             ; End of system variables
0042+  407D             
0022   407D             
0023   407D             ;the standard REM statement that will contain our 'hex' code
0024   407D             #include "line1.asm"
0001+  407D             ;Line 1
0002+  407D             ;this is the REM statement...
0003+  407D 00 00       Line1:          DEFB $00,$00                    ; Line 1
0004+  407F 9D 00                       DEFW Line1End-Line1Text         ; Line 1 length
0005+  4081 EA          Line1Text:      DEFB $ea                        ; REM             
0006+  4082             
0025   4082             
0026   4082             ;------------------------------------------------------------
0027   4082             ; code starts here and gets added to the end of the REM 
0028   4082             ;------------------------------------------------------------
0029   4082             
0030   4082             ;back to BASIC	
0031   4082             ;converts text in a buffer to an integer
0032   4082             ;this function takes the address of the rightmost
0033   4082             ;hl address of rightmost byte
0034   4082             ;c number of bytes in the buffer
0035   4082             ;result is returned in bc
0036   4082             main:
0037   4082 21 1A 41        ld hl, buffer ; addr of rightmost char
0038   4085 01 02 00        ld bc, $02
0039   4088 09              add hl, bc
0040   4089 0E 03           ld c, $03 ; num chars
0041   408B CD 9A 40        call  atoi; should convert to 103d ->bc
0042   408E                 ;ld a, c
0043   408E                 ;cp 103
0044   408E                 ;ret z
0045   408E                 
0046   408E 79              ld a, c
0047   408F 2A 0C 40        ld hl, (D_FILE)
0048   4092 01 0A 00        ld bc, 10
0049   4095 09              add hl, bc
0050   4096                
0051   4096 CD F8 40        call itoa;
0052   4099                 
0053   4099                 
0054   4099                 ;jp main
0055   4099 C9              ret
0056   409A                 
0057   409A             
0058   409A                 
0059   409A             ;converts text in a buffer to an integer
0060   409A             ;this function t akes the address of the rightmost
0061   409A             ;hl address of rightmost byte
0062   409A             ;c number of bytes in the buffer
0063   409A             ;result is returned in bc
0064   409A             atoi:
0065   409A                 ;bc will be the sum
0066   409A                 ;de will be the place value (power of 10)
0067   409A                 ;hl will contain the src address
0068   409A                 ;a will be loop counter
0069   409A 79              ld a, c    
0070   409B 01 00 00        ld bc, $0000
0071   409E 11 01 00        ld de, $0001
0072   40A1             atoiloop:
0073   40A1 F5              push af ; save loop counter
0074   40A2 E5              push hl ; save src addr (free up hl)
0075   40A3 C5              push bc ; save sum (free up bc)
0076   40A4                 
0077   40A4 4E              ld c, (hl)
0078   40A5 CD CC 40        call char_to_num;
0079   40A8 79              ld a, c
0080   40A9 FE FF           cp $FF
0081   40AB CA C8 40        jp z, invalid
0082   40AE                 
0083   40AE                 ;multiply de * the place value (de)
0084   40AE D5              push de
0085   40AF CD E7 40        call Mul8 ; HL=DE*A
0086   40B2 D1              pop de
0087   40B3                 
0088   40B3                 ;move temp to bc
0089   40B3 44              ld b, h
0090   40B4 4D              ld c, l
0091   40B5                 
0092   40B5                 ;add to the sum
0093   40B5 E1              pop hl ; restore sum to hl
0094   40B6 09              add hl, bc
0095   40B7 44              ld b, h ; copy sum back into bc
0096   40B8 4D              ld c, l
0097   40B9                 
0098   40B9                 ;multiply the place value x 10
0099   40B9 3E 0A           ld a, 10
0100   40BB CD E7 40        call Mul8 ; HL=DE*A
0101   40BE 54              ld d, h
0102   40BF 5D              ld e, l
0103   40C0                 
0104   40C0 E1              pop hl ; restore addr to read from
0105   40C1 2B              dec hl
0106   40C2                 
0107   40C2 F1              pop af ; restore loop counter
0108   40C3 3D              dec a  ; dec loop counter
0109   40C4 C2 A1 40        jp nz, atoiloop;
0110   40C7             
0111   40C7                 ;finished loop - number was valid
0112   40C7              ;   ld hl, $01 return code
0113   40C7              ;   push hl
0114   40C7 C9              ret
0115   40C8             invalid:
0116   40C8 C1              pop bc ;restore stack
0117   40C9 E1              pop hl
0118   40CA F1              pop af
0119   40CB             ;    ld bc, $FFFF return code
0120   40CB             ;  push bc
0121   40CB C9              ret
0122   40CC             
0123   40CC             ;take char in c
0124   40CC             ;puts code into c
0125   40CC             ;c = $FF if char is invalid
0126   40CC             char_to_num:
0127   40CC F5              push af
0128   40CD D5              push de
0129   40CE E5              push hl
0130   40CF                      
0131   40CF 1E 1C           ld e, $1C   ; subtract off $1C to convert it to a number
0132   40D1 79              ld a, c     ; load char into accumulator
0133   40D2 93              sub e   ;subract $1C from char
0134   40D3 FA E1 40        jp m, badchar  ; char was less than "0"
0135   40D6                 
0136   40D6                 ; char is still loaded into d
0137   40D6                 ; load char code for "9"
0138   40D6                 ; subtract that from the char
0139   40D6 57              ld d, a;  
0140   40D7 3E 09           ld a, $09 ; char code for 9
0141   40D9 92              sub d;
0142   40DA FA E1 40        jp m, badchar; char was greater than "9"
0143   40DD                 
0144   40DD                 ;char (in d) is valid and is 0-9
0145   40DD 4A              ld c, d;
0146   40DE C3 E3 40        jp goodchar
0147   40E1             badchar:
0148   40E1 0E FF           ld c, $ff
0149   40E3             goodchar:
0150   40E3 E1              pop hl
0151   40E4 D1              pop de
0152   40E5 F1              pop af
0153   40E6 C9              ret
0154   40E7             
0155   40E7             
0156   40E7             Mul8:                            ; this routine performs the operation HL=DE*A
0157   40E7 21 00 00      ld hl,0                        ; HL is used to accumulate the result
0158   40EA 06 08         ld b,8                         ; the multiplier (A) is 8 bits wide
0159   40EC             Mul8Loop:
0160   40EC 0F            rrca                           ; putting the next bit into the carry
0161   40ED D2 F1 40      jp nc,Mul8Skip                 ; if zero, we skip the addition (jp is used for speed)
0162   40F0 19            add hl,de                      ; adding to the product if necessary
0163   40F1             Mul8Skip:
0164   40F1 CB 23         sla e                          ; calculating the next auxiliary product by shifting
0165   40F3 CB 12         rl d                           ; DE one bit leftwards (refer to the shift instructions!)
0166   40F5 10 F5         djnz Mul8Loop
0167   40F7 C9            ret
0168   40F8             ;this subroutine will convert a number in 'a' to a chars
0169   40F8             ;a - the number to convert
0170   40F8             ;hl - the result will be placed in memory at the destination address (right justified)
0171   40F8             itoa:
0172   40F8                 ;push af
0173   40F8 4F              ld c, a
0174   40F9 16 0A           ld d, 10
0175   40FB CD 0C 41        call C_Div_D ; puts remainder in a
0176   40FE                 
0177   40FE                 ;convert a to a char code
0178   40FE 5F              ld e, a; save quotient
0179   40FF C5              push bc ; save quotient
0180   4100 C6 1C           add a, $1c ; convert remainder to a char code
0181   4102 77              ld (hl), a ; store char
0182   4103 2B              dec hl
0183   4104                 
0184   4104 C1              pop bc  ; retore queotient  
0185   4105 79              ld a, c
0186   4106 FE 00           cp 0 ;if a is 0, well are done
0187   4108 C2 F8 40        jp nz, itoa
0188   410B C9              ret
0189   410C                 
0190   410C              
0191   410C             ;this code taken from http://z80-heaven.wikidot.com/math#toc39    
0192   410C             C_Div_D:
0193   410C             ;Inputs:
0194   410C             ;     C is the numerator
0195   410C             ;     D is the denominator
0196   410C             ;Outputs:
0197   410C             ;     A is the remainder
0198   410C             ;     B is 0
0199   410C             ;     C is the result of C/D
0200   410C             ;     D,E,H,L are not changed
0201   410C             ;
0202   410C 06 08           ld b,8
0203   410E AF              xor a
0204   410F CB 21           sla c
0205   4111 17              rla
0206   4112 BA              cp d
0207   4113 38 02           jr c,$+4
0208   4115 0C              inc c
0209   4116 92              sub d
0210   4117 10 F6           djnz $-8
0211   4119 C9              ret
0212   411A              ;include our variables
0213   411A             ;#include "vars.asm"
0214   411A             buffer:
0215   411A 1D 1C 1F        DEFB $1D, $1C, $1F ; "103"
0216   411D             
0217   411D             ; ===========================================================
0218   411D             ; code ends
0219   411D             ; ===========================================================
0220   411D             ;end the REM line and put in the RAND USR line to call our 'hex code'
0221   411D             #include "line2.asm"
0001+  411D             ;this is the end of line 1 - the REM			
0002+  411D 76          				DEFB $76                        ; Newline				
0003+  411E             ;followed by the the RAND USR line				
0004+  411E             Line1End       
0005+  411E 00 0A       Line2			DEFB $00,$0a
0006+  4120 0E 00                       DEFW Line2End-Line2Text
0007+  4122 F9 D4       Line2Text     	DEFB $F9,$D4                    ; RAND USR
0008+  4124 1D 22 21 1D 				DEFB $1D,$22,$21,$1D,$20        ; 16514                
0008+  4128 20 
0009+  4129 7E                          DEFB $7E                        ; Number
0010+  412A 8F 01 04 00                 DEFB $8F,$01,$04,$00,$00        ; Numeric encoding
0010+  412E 00 
0011+  412F 76                          DEFB $76                        ; Newline
0012+  4130             Line2End 
0222   4130             
0223   4130             ;display file defintion
0224   4130             #include "screen.asm"               
0001+  4130             ;ZX81 screens
0002+  4130             ; Display file (ZX81 screen) - low res screen
0003+  4130 76          Display        	DEFB $76     
0004+  4131 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 0
0004+  4135 00 00 00 00 
0004+  4139 00 00 00 00 
0004+  413D 00 00 00 00 
0004+  4141 00 00 00 00 
0004+  4145 00 00 00 00 
0004+  4149 00 00 00 00 
0004+  414D 00 00 00 00 
0004+  4151 76 
0005+  4152 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 1
0005+  4156 00 00 00 00 
0005+  415A 00 00 00 00 
0005+  415E 00 00 00 00 
0005+  4162 00 00 00 00 
0005+  4166 00 00 00 00 
0005+  416A 00 00 00 00 
0005+  416E 00 00 00 00 
0005+  4172 76 
0006+  4173 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 2
0006+  4177 00 00 00 00 
0006+  417B 00 00 00 00 
0006+  417F 00 00 00 00 
0006+  4183 00 00 00 00 
0006+  4187 00 00 00 00 
0006+  418B 00 00 00 00 
0006+  418F 00 00 00 00 
0006+  4193 76 
0007+  4194 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 3
0007+  4198 00 00 00 00 
0007+  419C 00 00 00 00 
0007+  41A0 00 00 00 00 
0007+  41A4 00 00 00 00 
0007+  41A8 00 00 00 00 
0007+  41AC 00 00 00 00 
0007+  41B0 00 00 00 00 
0007+  41B4 76 
0008+  41B5 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 4
0008+  41B9 00 00 00 00 
0008+  41BD 00 00 00 00 
0008+  41C1 00 00 00 00 
0008+  41C5 00 00 00 00 
0008+  41C9 00 00 00 00 
0008+  41CD 00 00 00 00 
0008+  41D1 00 00 00 00 
0008+  41D5 76 
0009+  41D6 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 5
0009+  41DA 00 00 00 00 
0009+  41DE 00 00 00 00 
0009+  41E2 00 00 00 00 
0009+  41E6 00 00 00 00 
0009+  41EA 00 00 00 00 
0009+  41EE 00 00 00 00 
0009+  41F2 00 00 00 00 
0009+  41F6 76 
0010+  41F7 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 6
0010+  41FB 00 00 00 00 
0010+  41FF 00 00 00 00 
0010+  4203 00 00 00 00 
0010+  4207 00 00 00 00 
0010+  420B 00 00 00 00 
0010+  420F 00 00 00 00 
0010+  4213 00 00 00 00 
0010+  4217 76 
0011+  4218 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 7
0011+  421C 00 00 00 00 
0011+  4220 00 00 00 00 
0011+  4224 00 00 00 00 
0011+  4228 00 00 00 00 
0011+  422C 00 00 00 00 
0011+  4230 00 00 00 00 
0011+  4234 00 00 00 00 
0011+  4238 76 
0012+  4239 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 8
0012+  423D 00 00 00 00 
0012+  4241 00 00 00 00 
0012+  4245 00 00 00 00 
0012+  4249 00 00 00 00 
0012+  424D 00 00 00 00 
0012+  4251 00 00 00 00 
0012+  4255 00 00 00 00 
0012+  4259 76 
0013+  425A 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 9
0013+  425E 00 00 00 00 
0013+  4262 00 00 00 00 
0013+  4266 00 00 00 00 
0013+  426A 00 00 00 00 
0013+  426E 00 00 00 00 
0013+  4272 00 00 00 00 
0013+  4276 00 00 00 00 
0013+  427A 76 
0014+  427B 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 10
0014+  427F 00 00 00 00 
0014+  4283 00 00 00 00 
0014+  4287 00 00 00 00 
0014+  428B 00 00 00 00 
0014+  428F 00 00 00 00 
0014+  4293 00 00 00 00 
0014+  4297 00 00 00 00 
0014+  429B 76 
0015+  429C 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 11
0015+  42A0 00 00 00 00 
0015+  42A4 00 00 00 00 
0015+  42A8 00 00 00 00 
0015+  42AC 00 00 00 00 
0015+  42B0 00 00 00 00 
0015+  42B4 00 00 00 00 
0015+  42B8 00 00 00 00 
0015+  42BC 76 
0016+  42BD 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 12
0016+  42C1 00 00 00 00 
0016+  42C5 00 00 00 00 
0016+  42C9 00 00 00 00 
0016+  42CD 00 00 00 00 
0016+  42D1 00 00 00 00 
0016+  42D5 00 00 00 00 
0016+  42D9 00 00 00 00 
0016+  42DD 76 
0017+  42DE 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 13
0017+  42E2 00 00 00 00 
0017+  42E6 00 00 00 00 
0017+  42EA 00 00 00 00 
0017+  42EE 00 00 00 00 
0017+  42F2 00 00 00 00 
0017+  42F6 00 00 00 00 
0017+  42FA 00 00 00 00 
0017+  42FE 76 
0018+  42FF 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 14
0018+  4303 00 00 00 00 
0018+  4307 00 00 00 00 
0018+  430B 00 00 00 00 
0018+  430F 00 00 00 00 
0018+  4313 00 00 00 00 
0018+  4317 00 00 00 00 
0018+  431B 00 00 00 00 
0018+  431F 76 
0019+  4320 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 15
0019+  4324 00 00 00 00 
0019+  4328 00 00 00 00 
0019+  432C 00 00 00 00 
0019+  4330 00 00 00 00 
0019+  4334 00 00 00 00 
0019+  4338 00 00 00 00 
0019+  433C 00 00 00 00 
0019+  4340 76 
0020+  4341 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 16
0020+  4345 00 00 00 00 
0020+  4349 00 00 00 00 
0020+  434D 00 00 00 00 
0020+  4351 00 00 00 00 
0020+  4355 00 00 00 00 
0020+  4359 00 00 00 00 
0020+  435D 00 00 00 00 
0020+  4361 76 
0021+  4362 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 17
0021+  4366 00 00 00 00 
0021+  436A 00 00 00 00 
0021+  436E 00 00 00 00 
0021+  4372 00 00 00 00 
0021+  4376 00 00 00 00 
0021+  437A 00 00 00 00 
0021+  437E 00 00 00 00 
0021+  4382 76 
0022+  4383 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 18
0022+  4387 00 00 00 00 
0022+  438B 00 00 00 00 
0022+  438F 00 00 00 00 
0022+  4393 00 00 00 00 
0022+  4397 00 00 00 00 
0022+  439B 00 00 00 00 
0022+  439F 00 00 00 00 
0022+  43A3 76 
0023+  43A4 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 19
0023+  43A8 00 00 00 00 
0023+  43AC 00 00 00 00 
0023+  43B0 00 00 00 00 
0023+  43B4 00 00 00 00 
0023+  43B8 00 00 00 00 
0023+  43BC 00 00 00 00 
0023+  43C0 00 00 00 00 
0023+  43C4 76 
0024+  43C5 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 20
0024+  43C9 00 00 00 00 
0024+  43CD 00 00 00 00 
0024+  43D1 00 00 00 00 
0024+  43D5 00 00 00 00 
0024+  43D9 00 00 00 00 
0024+  43DD 00 00 00 00 
0024+  43E1 00 00 00 00 
0024+  43E5 76 
0025+  43E6 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 21
0025+  43EA 00 00 00 00 
0025+  43EE 00 00 00 00 
0025+  43F2 00 00 00 00 
0025+  43F6 00 00 00 00 
0025+  43FA 00 00 00 00 
0025+  43FE 00 00 00 00 
0025+  4402 00 00 00 00 
0025+  4406 76 
0026+  4407 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 22
0026+  440B 00 00 00 00 
0026+  440F 00 00 00 00 
0026+  4413 00 00 00 00 
0026+  4417 00 00 00 00 
0026+  441B 00 00 00 00 
0026+  441F 00 00 00 00 
0026+  4423 00 00 00 00 
0026+  4427 76 
0027+  4428 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 23
0027+  442C 00 00 00 00 
0027+  4430 00 00 00 00 
0027+  4434 00 00 00 00 
0027+  4438 00 00 00 00 
0027+  443C 00 00 00 00 
0027+  4440 00 00 00 00 
0027+  4444 00 00 00 00 
0027+  4448 76 
0028+  4449             
0225   4449             
0226   4449             ;close out the basic program
0227   4449             #include "endbasic.asm"0001+  4449             ; close out the BASIC program structure
0002+  4449             ; BASIC Variables area
0003+  4449             Variables:      
0004+  4449 80          VariablesEnd:   DEFB $80
0005+  444A             BasicEnd:                              
0006+  444A             
0007+  444A             
0008+  444A             #END
tasm: Number of errors = 0
