0001   0000             ;
0002   0000             ; To assembly this, either use the zxasm.bat file:
0003   0000             ;
0004   0000             ; zxasm hello
0005   0000             ;
0006   0000             ; or... assemble with the following options:
0007   0000             ;
0008   0000             ; tasm -80 -b -s hello.asm hello.p
0009   0000             ;
0010   0000             ;==============================================
0011   0000             ;    ZX81 Wumpus
0012   0000             ;==============================================
0013   0000             ;
0014   0000             ;defs
0015   0000             #include "zx81defs.asm"
0001+  0000             ;defines to make us feel more at home
0002+  0000             #define         DEFB .BYTE
0003+  0000             #define         DEFW .WORD
0004+  0000             #define         DEFM .TEXT
0005+  0000             #define         ORG  .ORG
0006+  0000             #define         EQU  .EQU
0016   0000             ;EQUs for ROM routines
0017   0000             #include "zx81rom.asm"
0001+  0000             ;ZX81 ROM routines
0002+  0000             PRINT			EQU $10
0003+  0000             PRINTAT			EQU $08F5
0004+  0000             DISPROUT		EQU $0281
0005+  0000             DISPLAY_3		EQU $0292 ;restore registers after a 'slow' display
0006+  0000             DISPLAY_5		EQU $02B5
0007+  0000             PLOT			EQU $0BB2 	; note ROM plot is 0baf - however first thing it does try to pull BC from the calculator stack
0008+  0000             							; so we'll skip past that and set BC ourselves
0009+  0000             CLS				EQU $0A2A
0010+  0000             KSCAN           EQU $02BB 
0011+  0000             FINDCHR         EQU $07BD
0012+  0000             COPY            EQU $0869
0013+  0000             FAST            EQU $0F23
0014+  0000             SLOW            EQU $0F2B
0015+  0000             SLOWORFAST		EQU $0207
0016+  0000             ;sys vars
0017+  0000             ERR_NR			EQU $40000018   0000             ;ZX81 char codes/how to survive without ASCII
0019   0000             #include "charcodes.asm"
0001+  0000             ; ZX81 Characters.
0002+  0000             __:				EQU	$00	;spacja
0003+  0000             _QT:			EQU	$0B	;"
0004+  0000             _PD:			EQU	$0C	;funt
0005+  0000             _SD:			EQU	$0D	;$
0006+  0000             _CL:			EQU	$0E	;:
0007+  0000             _QM:			EQU	$0F	;?
0008+  0000             _OP:			EQU	$10	;(
0009+  0000             _CP:			EQU	$11	;)
0010+  0000             _GT:			EQU	$12	;>
0011+  0000             _LT:			EQU	$13	;<
0012+  0000             _EQ:			EQU	$14	;=
0013+  0000             _PL:			EQU	$15	;+
0014+  0000             _MI:			EQU	$16	;-
0015+  0000             _AS:			EQU	$17	;*
0016+  0000             _SL:			EQU	$18	;/
0017+  0000             _SC:			EQU	$19	;;
0018+  0000             _CM:			EQU	$1A	;,
0019+  0000             _DT:			EQU	$1B	;.
0020+  0000             _NL:			EQU	$76	;NEWLINE
0021+  0000             
0022+  0000             _0				EQU $1C
0023+  0000             _1				EQU $1D
0024+  0000             _2				EQU $1E
0025+  0000             _3				EQU $1F
0026+  0000             _4				EQU $20
0027+  0000             _5				EQU $21
0028+  0000             _6				EQU $22
0029+  0000             _7				EQU $23
0030+  0000             _8				EQU $24
0031+  0000             _9				EQU $25
0032+  0000             _A				EQU $26
0033+  0000             _B				EQU $27
0034+  0000             _C				EQU $28
0035+  0000             _D				EQU $29
0036+  0000             _E				EQU $2A
0037+  0000             _F				EQU $2B
0038+  0000             _G				EQU $2C
0039+  0000             _H				EQU $2D
0040+  0000             _I				EQU $2E
0041+  0000             _J				EQU $2F
0042+  0000             _K				EQU $30
0043+  0000             _L				EQU $31
0044+  0000             _M				EQU $32
0045+  0000             _N				EQU $33
0046+  0000             _O				EQU $34
0047+  0000             _P				EQU $35
0048+  0000             _Q				EQU $36
0049+  0000             _R				EQU $37
0050+  0000             _S				EQU $38
0051+  0000             _T				EQU $39
0052+  0000             _U				EQU $3A
0053+  0000             _V				EQU $3B
0054+  0000             _W				EQU $3C
0055+  0000             _X				EQU $3D
0056+  0000             _Y				EQU $3E
0057+  0000             _Z				EQU $3F
0020   0000             ;system variables
0021   0000             #include "zx81sys.asm"
0001+  0000             ;system variables
0002+  0000             ;Origin of a ZX81 file is always 16393
0003+  0000             
0004+  4009                             ORG 16393
0005+  4009                             
0006+  4009             ; System variables live here
0007+  4009 00          VERSN:          DEFB 0
0008+  400A 02 00       E_PPC:          DEFW 2
0009+  400C A4 4A       D_FILE:         DEFW Display
0010+  400E A5 4A       DF_CC:          DEFW Display+1                  ; First character of display
0011+  4010 BD 4D       VARS:           DEFW Variables
0012+  4012 00 00       DEST:           DEFW 0
0013+  4014 BE 4D       E_LINE:         DEFW BasicEnd 
0014+  4016 C2 4D       CH_ADD:         DEFW BasicEnd+4                 ; Simulate SAVE "X"
0015+  4018 00 00       X_PTR:          DEFW 0
0016+  401A C3 4D       STKBOT:         DEFW BasicEnd+5
0017+  401C C3 4D       STKEND:         DEFW BasicEnd+5                 ; Empty stack
0018+  401E 00          BREG:           DEFB 0
0019+  401F 5D 40       MEM:            DEFW MEMBOT
0020+  4021 00          UNUSED1:        DEFB 0
0021+  4022 02          DF_SZ:          DEFB 2
0022+  4023 02 00       S_TOP:          DEFW $0002                      ; Top program line number
0023+  4025 BF FD       LAST_K:         DEFW $fdbf
0024+  4027 0F          DEBOUN:         DEFB 15
0025+  4028 37          MARGIN:         DEFB 55
0026+  4029 92 4A       NXTLIN:         DEFW Line2                      ; Next line address
0027+  402B 00 00       OLDPPC:         DEFW 0
0028+  402D 00          FLAGX:          DEFB 0
0029+  402E 00 00       STRLEN:         DEFW 0
0030+  4030 8D 0C       T_ADDR:         DEFW $0c8d
0031+  4032 00 00       SEED:           DEFW 0
0032+  4034 A3 F5       FRAMES:         DEFW $f5a3
0033+  4036 00 00       COORDS:         DEFW 0
0034+  4038 BC          PR_CC:          DEFB $bc
0035+  4039 21 18       S_POSN:         DEFW $1821
0036+  403B 40          CDFLAG:         DEFB $40
0037+  403C 00 00 00 00 PRBUFF:         DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,$76 ; 32 Spaces + Newline
0037+  4040 00 00 00 00 
0037+  4044 00 00 00 00 
0037+  4048 00 00 00 00 
0037+  404C 00 00 00 00 
0037+  4050 00 00 00 00 
0037+  4054 00 00 00 00 
0037+  4058 00 00 00 00 
0037+  405C 76 
0038+  405D 00 00 00 00 MEMBOT:         DEFB 0,0,0,0,0,0,0,0,0,0,$84,$20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 30 zeros
0038+  4061 00 00 00 00 
0038+  4065 00 00 84 20 
0038+  4069 00 00 00 00 
0038+  406D 00 00 00 00 
0038+  4071 00 00 00 00 
0038+  4075 00 00 00 00 
0038+  4079 00 00 
0039+  407B 00 00       UNUNSED2:       DEFW 0
0040+  407D             
0041+  407D             ; End of system variables
0042+  407D             
0022   407D             
0023   407D             ;the standard REM statement that will contain our 'hex' code
0024   407D             #include "line1.asm"
0001+  407D             ;Line 1
0002+  407D             ;this is the REM statement...
0003+  407D 00 00       Line1:          DEFB $00,$00                    ; Line 1
0004+  407F 11 0A                       DEFW Line1End-Line1Text         ; Line 1 length
0005+  4081 EA          Line1Text:      DEFB $ea                        ; REM             
0006+  4082             
0025   4082             
0026   4082             ;------------------------------------------------------------
0027   4082             ; code starts here and gets added to the end of the REM 
0028   4082             ;------------------------------------------------------------
0029   4082              
0030   4082 CD 2A 0A        call CLS
0031   4085                 
0032   4085 21 43 48        ld hl, welcome;
0033   4088 CD 7B 41        call printline
0034   408B CD C5 42        call scroll
0035   408E                     
0036   408E 21 7D 48        ld hl, welcome3;
0037   4091 CD 7B 41        call printline
0038   4094 CD C5 42        call scroll
0039   4097             
0040   4097 21 5E 48        ld hl, welcome2;
0041   409A CD 7B 41        call printline
0042   409D CD C5 42        call scroll
0043   40A0             
0044   40A0 CD 01 44        call set_up_game
0045   40A3 CD 35 46        call draw_intro
0046   40A6                 
0047   40A6             mainloop:
0048   40A6             getchar: 
0049   40A6                 
0050   40A6 11 25 47        ld de, kbstatus
0051   40A9 CD 62 41        call readkeyboard ;put the keycode in the address stored in de
0052   40AC                 
0053   40AC                 ;now we can check kbstatus
0054   40AC                 ;if no key was pressed, the both bytes will be $ff
0055   40AC                 
0056   40AC 3A 25 47        ld a, (kbstatus)
0057   40AF 3C              inc a
0058   40B0 F5              push af
0059   40B1 FE 00           cp 0
0060   40B3 CC 73 41        call z, clearflag; set the flag saying we can take a key
0061   40B6 F1              pop af
0062   40B7 FE 00           cp 0
0063   40B9 CA A6 40        jp z, getchar; ; no key pressed
0064   40BC              
0065   40BC                 ;if a key is already down jump to getchar
0066   40BC 3A 27 47        ld a, (keydown)
0067   40BF FE 01           cp 1
0068   40C1 CA A6 40        jp z, getchar;  a key was pressed but it was a repeat
0069   40C4                 
0070   40C4                 ;setkey down
0071   40C4 3E 01           ld a, 1
0072   40C6 32 27 47        ld (keydown), a
0073   40C9                 
0074   40C9                 ;call findchar (ROM) to get the key code
0075   40C9 ED 4B 25 47     ld bc, (kbstatus)
0076   40CD CD BD 07        call FINDCHR; takes code in bc and returns addr of code in hl
0077   40D0 7E              ld a, (HL) ; store returned code in a
0078   40D1                 
0079   40D1                 ;was quit key pressed
0080   40D1 FE 36           cp $36; code for 'q'
0081   40D3 CA 3E 41        jp z, quit_program
0082   40D6                 
0083   40D6                 ;was the enter key pressed?
0084   40D6 FE 76           cp $76
0085   40D8 C2 10 41        jp nz, noenter
0086   40DB                 
0087   40DB                 ;enter was pressed process the input
0088   40DB 3A 34 47        ld a, (inputstate) 
0089   40DE FE 00           cp 0 ; m or s option was previously entered
0090   40E0 F5              push af; save a + f
0091   40E1 CC E3 42        call z, handle_command_input ; was m or s pressed?
0092   40E4 F1              pop af; restore flags
0093   40E5 FE 01           cp 1 ; m or s option was previously entered
0094   40E7 F5              push af ;save flags
0095   40E8 CC 08 43        call z, handle_room_input
0096   40EB F1              pop af ; restore
0097   40EC FE 02           cp 2
0098   40EE C2 FF 40        jp nz, skipquit
0099   40F1                 
0100   40F1                 ;did the player hit the 'n' key
0101   40F1                 ;if so return (we're done)
0102   40F1 3A 28 47        ld a, (buffer)
0103   40F4 FE 33           cp _N
0104   40F6 CA 3E 41        jp z, quit_program
0105   40F9                 ;if we got here player didn't quit
0106   40F9                 ;reset the game
0107   40F9 CD 2A 0A        call CLS
0108   40FC CD 01 44        call set_up_game;
0109   40FF             
0110   40FF             skipquit:
0111   40FF                 
0112   40FF                 ;is the player dead?
0113   40FF 3A 3A 47        ld a, (gameover)
0114   4102 FE 01           cp 1
0115   4104 C2 0D 41        jp nz, notdead
0116   4107                 
0117   4107 CD 97 41        call clearbuf; ;not source of crash
0118   410A CD 53 41        call prompt_play_again;
0119   410D                 
0120   410D             notdead:   
0121   410D C3 A6 40        jp mainloop;
0122   4110                 
0123   4110             noenter:    
0124   4110                 ;was del key pressed?
0125   4110 FE 77           cp $77
0126   4112 C2 1B 41        jp nz, noclear;
0127   4115 CD 97 41        call clearbuf;
0128   4118 C3 35 41        jp printbuf; 
0129   411B                  
0130   411B             noclear:  
0131   411B             skip:
0132   411B              
0133   411B                 ;then put that key code in the text buffer
0134   411B             ;    push af
0135   411B ED 4B 32 47     ld bc, (bufferix)
0136   411F 5F              ld e,a
0137   4120 79              ld a,c ;save 1st char in 'a'
0138   4121 FE 05           cp 5 ; 5 is max # of chars
0139   4123 CA 35 41        jp z, fullbuf
0140   4126 7B              ld a, e; copy char back 
0141   4127 21 28 47        ld hl, buffer
0142   412A 09              add hl, bc
0143   412B 77              ld (hl), a;put char in buffer
0144   412C                 
0145   412C                 ;and increment the count
0146   412C ED 4B 32 47     ld bc, (bufferix); 
0147   4130 03              inc bc
0148   4131 ED 43 32 47     ld (bufferix), bc; store it back
0149   4135             fullbuf:
0150   4135             printbuf:    
0151   4135 21 28 47        ld hl, buffer
0152   4138 CD 7B 41        call printline
0153   413B                 
0154   413B C3 A6 40        jp mainloop ; end of main loop
0155   413E             quit_program:
0156   413E               
0157   413E C9              ret ;end of main loop
0158   413F             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0159   413F             promptcommand:
0160   413F                 ;print the buffer
0161   413F 21 9E 48        ld hl, msprompt
0162   4142 CD 7B 41        call printline
0163   4145 CD C5 42        call scroll
0164   4148 C9              ret
0165   4149             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
0166   4149             promptroom
0167   4149             
0168   4149                 ;print the room message prompt
0169   4149 21 B3 48        ld hl, roomprompt
0170   414C CD 7B 41        call printline
0171   414F CD C5 42        call scroll    
0172   4152 C9              ret
0173   4153             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
0174   4153             prompt_play_again: 
0175   4153                 ;set the flag saying that we are accepting y/n input
0176   4153 3E 02           ld a, 2
0177   4155 32 34 47        ld (inputstate), a
0178   4158             
0179   4158                 ;print the buffer
0180   4158 21 DA 48        ld hl, playagainprompt
0181   415B CD 7B 41        call printline
0182   415E CD C5 42        call scroll
0183   4161 C9              ret
0184   4162             
0185   4162             ;----------------------------
0186   4162             ;THIS ROUTINE CALL KSCAN AT 02BB, THEN STORES
0187   4162             ;THE STATUS CODE IN THE ADDRESS STORED IN DE
0188   4162             readkeyboard: ; 40A0
0189   4162 E5              push hl    ;save HL to stack
0190   4163 C5              push bc    ;save BC
0191   4164 D5              push de
0192   4165 CD BB 02        call KSCAN    ;call ROM subroutine at address 02BB, result put in HL
0193   4168 D1              pop de
0194   4169 44              ld b, h  ;move hl to bc (because we're about to need HL)
0195   416A 4D              ld c, l
0196   416B 62              ld h, d  ;copy kb status flag address into HL (so we can store it)
0197   416C 6B              ld l, e
0198   416D 71              ld (hl), c ;store B in (HL)
0199   416E 2C              inc l
0200   416F 70              ld (hl), b ;store C in (HL)+1
0201   4170 C1              pop bc
0202   4171 E1              pop hl
0203   4172 C9              ret
0204   4173                 
0205   4173             ;sets the key down flag to 0
0206   4173             clearflag:
0207   4173 F5              push af
0208   4174 3E 00           ld a, 0
0209   4176 32 27 47        ld (keydown), a
0210   4179 F1              pop af
0211   417A C9              ret
0212   417B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0213   417B             ;accepts the address of the text to print in hl, and the D_FILE location to print in DE
0214   417B             ;printing stops when the char 0xFF is hit
0215   417B             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0216   417B             printline:
0217   417B C5              push bc
0218   417C F5              push af
0219   417D E5              push hl
0220   417E 2A 0C 40        ld hl, (D_FILE)
0221   4181 01 95 02        ld bc, 661
0222   4184 09              add hl, bc 
0223   4185 54              ld d, h
0224   4186 5D              ld e, l
0225   4187 E1              pop hl
0226   4188             prloop:    
0227   4188 7E              ld a, (hl)  ; //get a char
0228   4189 FE FF           cp $ff      ; hit the end?
0229   418B CA 94 41        jp z, done
0230   418E 12              ld (de), a; copy char in 'a' to D_FILE
0231   418F 23              inc hl ; increment addr to copy to
0232   4190 13              inc de ; get addr of next cha racter
0233   4191 C3 88 41        jp prloop
0234   4194             done:
0235   4194 F1              pop af
0236   4195 C1              pop bc
0237   4196 C9              ret
0238   4197             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0239   4197             ;clears the buffer and resets the index
0240   4197             ;also clears the screen
0241   4197             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0242   4197             clearbuf:
0243   4197 ED 5B 0C 40     ld de, (D_FILE)
0244   419B 21 95 02        ld hl, 661
0245   419E 19              add hl, de
0246   419F 54              ld d, h
0247   41A0 5D              ld e, l
0248   41A1                 
0249   41A1 3E 00           ld a, 0
0250   41A3 06 0A           ld b, 10
0251   41A5                 
0252   41A5 21 28 47        ld hl, buffer
0253   41A8                 
0254   41A8             clrloop:
0255   41A8 0E FF           ld c, $ff
0256   41AA 71              ld (hl), c ; put endline in buffer
0257   41AB 23              inc hl
0258   41AC E5              push hl ; save hl ()
0259   41AD 0E 00           ld c, $00
0260   41AF 62              ld h, d ; move de to hl
0261   41B0 6B              ld l, e
0262   41B1 71              ld (hl), c ; put space on screen
0263   41B2 23              inc hl; inc dest address
0264   41B3 54              ld d,h  ; store it back in de
0265   41B4 5D              ld e,l
0266   41B5 E1              pop hl
0267   41B6 3C              inc a; inc lp counter
0268   41B7 B8              cp b; done?
0269   41B8 C2 A8 41        jp nz, clrloop
0270   41BB                 ;set buffer ix to 
0271   41BB 3E 00           ld a, 0
0272   41BD 32 32 47        ld (bufferix), a; set buffer index = 0
0273   41C0 32 33 47        ld (bufferix+1), a; set buffer index = 0
0274   41C3 C9              ret
0275   41C4             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0276   41C4             print_current_room:
0277   41C4                 ;print the buffer
0278   41C4 21 EB 48        ld hl, currentrooomtext
0279   41C7 CD 7B 41        call printline
0280   41CA                 
0281   41CA                 ;copy in the room number
0282   41CA 2A 0C 40        ld hl, (D_FILE)
0283   41CD 01 A6 02        ld bc, 678 ; 621 + 17
0284   41D0 09              add hl, bc 
0285   41D1                 
0286   41D1 E5              push hl ; move hl into de
0287   41D2 2A 38 47        ld hl, (currroomaddr)
0288   41D5 D1              pop de
0289   41D6                 
0290   41D6 ED A0           ldi ; copy the room label from hl (memory) to screen (de)
0291   41D8 ED A0           ldi    
0292   41DA                  
0293   41DA CD C5 42        call scroll
0294   41DD C9              ret
0295   41DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
0296   41DE             ;this subroutine checks for hazards in the room the player
0297   41DE             ;has just moved into
0298   41DE             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0299   41DE             handle_hazards:    
0300   41DE CD 88 42        call get_flags_byte; a
0301   41E1 F5              push af
0302   41E2                     
0303   41E2                 ;check for wumpus
0304   41E2 E6 01           and 1
0305   41E4 CA FA 41        jp z, check_for_pit
0306   41E7                 
0307   41E7 CD 28 45        call animate_wumpus;
0308   41EA                 
0309   41EA                 ;wumpus death
0310   41EA 21 91 49        ld hl, playereatenmessage
0311   41ED CD 7B 41        call printline;
0312   41F0                 
0313   41F0 3E 01           ld a, 1 ;set gameover to true
0314   41F2 32 3A 47        ld (gameover), a
0315   41F5 CD C5 42        call scroll
0316   41F8 F1              pop af
0317   41F9 C9              ret
0318   41FA             check_for_pit:    
0319   41FA                 ;check for pit
0320   41FA F1              pop af
0321   41FB F5              push af
0322   41FC E6 10           and 16
0323   41FE CA 14 42        jp z, check_for_bats
0324   4201                 
0325   4201 CD 65 44        call animate_pit_fall
0326   4204                 
0327   4204 21 53 49        ld hl, pitdeathmessage
0328   4207 CD 7B 41        call printline;
0329   420A CD C5 42        call scroll
0330   420D 3E 01           ld a, 1         ;set gameover to true
0331   420F 32 3A 47        ld (gameover), a
0332   4212 F1              pop af
0333   4213 C9              ret
0334   4214             check_for_bats:
0335   4214                 ;check for bats
0336   4214 F1              pop af ; restor flags byte
0337   4215 F5              push af ; save it back to stack
0338   4216 E6 04           and 4
0339   4218 CA 22 42        jp z, player_safe
0340   421B                 
0341   421B                 ;player needs to be moved
0342   421B F1              pop af ; restore stack
0343   421C CD 24 42        call fly_player_to_new_room 
0344   421F C3 DE 41        jp handle_hazards;  ;after move, room needs to be checked for pits/wumpus
0345   4222             player_safe: 
0346   4222 F1              pop af
0347   4223             ;    call print_tunnels; calls scroll
0348   4223             ;    call print_flags;
0349   4223 C9              ret
0350   4224             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0351   4224             fly_player_to_new_room:
0352   4224             
0353   4224 CD 04 45        call animate_bats
0354   4227 CD 2A 0A        call CLS
0355   422A             
0356   422A CD 13 47        call random_20 ; put player in random in a room
0357   422D 32 36 47        ld (curroom), a
0358   4230 CD 99 43        call set_room_addr;
0359   4233                 
0360   4233 21 72 49        ld hl, bats_fly_message;
0361   4236 CD 7B 41        call printline;
0362   4239                 
0363   4239                 ;overwrite the room number
0364   4239 2A 0C 40        ld hl, (D_FILE)
0365   423C 01 B1 02        ld bc, 689 ; 661 + offset
0366   423F 09              add hl, bc
0367   4240                 
0368   4240 E5              push hl
0369   4241 2A 38 47        ld hl, (currroomaddr)
0370   4244 44              ld b, h
0371   4245 4D              ld c, l
0372   4246 E1              pop hl
0373   4247                 
0374   4247 0A              ld a, (bc) ; get char
0375   4248 77              ld (hl), a ; copy char
0376   4249 03              inc bc
0377   424A 23              inc hl
0378   424B 0A              ld a, (bc) ; get char
0379   424C 77              ld (hl), a   ; copy char
0380   424D                 
0381   424D CD C5 42        call scroll
0382   4250                 
0383   4250 C9              ret
0384   4251             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
0385   4251             print_tunnels:
0386   4251                 ;print the buffer
0387   4251 21 FE 48        ld hl, tunnelstext
0388   4254 CD 7B 41        call printline
0389   4257                 
0390   4257                 ;11,15,22
0391   4257 ED 5B 38 47     ld de, (currroomaddr) ; load addr of byte with tunnel
0392   425B 13              inc de
0393   425C 13              inc de
0394   425D                
0395   425D             
0396   425D 2A 0C 40        ld hl, (D_FILE) ;1st
0397   4260 01 A1 02        ld bc, 673
0398   4263 09              add hl, bc
0399   4264 1A              ld a, (de)
0400   4265 D5              push de
0401   4266 CD 93 46        call itoa
0402   4269 D1              pop de
0403   426A                 
0404   426A 2A 0C 40        ld hl, (D_FILE) ;2nd
0405   426D 01 A5 02        ld bc, 677
0406   4270 09              add hl, bc
0407   4271 13              inc de
0408   4272 1A              ld a, (de)
0409   4273 D5              push de
0410   4274 CD 93 46        call itoa
0411   4277 D1              pop de
0412   4278                 
0413   4278 2A 0C 40        ld hl, (D_FILE) ;3rd
0414   427B 01 AC 02        ld bc, 684
0415   427E 09              add hl, bc
0416   427F 13              inc de
0417   4280 1A              ld a, (de)
0418   4281 CD 93 46        call itoa
0419   4284 CD C5 42        call scroll
0420   4287 C9              ret
0421   4288                 
0422   4288             get_flags_byte:
0423   4288 2A 38 47        ld hl, (currroomaddr) ; load addr of byte with tunnel
0424   428B 11 05 00        ld de, 5 ; 5 byte offset
0425   428E 19              add hl, de
0426   428F 7E              ld a, (hl) ; get flags bytes
0427   4290 C9              ret
0428   4291             ;prints bat, wumpus, and draft messages
0429   4291             print_flags:
0430   4291 CD 88 42        call get_flags_byte
0431   4294 F5              push af ; save flags
0432   4295 E6 20           and 32
0433   4297 CA A3 42        jp z, nopit;
0434   429A 21 30 49        ld hl, pitwarning
0435   429D CD 7B 41        call printline
0436   42A0 CD C5 42        call scroll
0437   42A3             nopit:
0438   42A3 F1              pop af ; restore flag byte
0439   42A4 F5              push af ; save it
0440   42A5 E6 08           and 8
0441   42A7 CA B3 42        jp z, nobats;
0442   42AA 21 17 49        ld hl, batswarning
0443   42AD CD 7B 41        call printline
0444   42B0 CD C5 42        call scroll
0445   42B3             nobats:
0446   42B3 F1              pop af; restore flag byte
0447   42B4 F5              push af
0448   42B5 E6 02           and 2; bit 2 = next to wumpus
0449   42B7 CA C3 42        jp z, nowumpus;
0450   42BA 21 3C 49        ld hl, wumpuswarning
0451   42BD CD 7B 41        call printline
0452   42C0 CD C5 42        call scroll
0453   42C3             nowumpus:
0454   42C3 F1              pop af;
0455   42C4 C9              ret
0456   42C5             
0457   42C5             ;this subroutine scrolls the display file up (assumes its full)
0458   42C5             scroll:
0459   42C5 ED 5B 0C 40     ld de, (D_FILE)
0460   42C9 13              inc de ; don't overwrite 1st cr in d_file
0461   42CA 62              ld h, d ; de -> hl
0462   42CB 6B              ld l, e
0463   42CC 01 21 00        ld bc, 33; 33 chars per line
0464   42CF 09              add hl, bc; hl is next line
0465   42D0 06 00           ld b,0
0466   42D2 0E 15           ld c, 21; bc no contains loop counter (20 lines)
0467   42D4              
0468   42D4             scrloop:
0469   42D4 C5              push bc ; save loop counter
0470   42D5 01 21 00        ld bc, 33; 33 chars per line
0471   42D8 ED B0           ldir ; copies hl to de until bc is 0
0472   42DA C1              pop bc ; restore loop counter
0473   42DB 0D              dec c
0474   42DC 79              ld a, c
0475   42DD FE 00           cp 0 ; is loop done
0476   42DF C2 D4 42        jp nz, scrloop
0477   42E2 C9              ret
0478   42E3                 
0479   42E3             handle_command_input:
0480   42E3             
0481   42E3                 ;save the command that was entered
0482   42E3                 ;make sure buffer[0] is m or s
0483   42E3 3A 28 47        ld a, (buffer)
0484   42E6              
0485   42E6                 ;now that we saved the buffer, we can clear it
0486   42E6 F5              push af
0487   42E7 CD C5 42        call scroll;
0488   42EA CD 97 41        call clearbuf;
0489   42ED F1              pop af
0490   42EE                 
0491   42EE FE 32           cp $32 ;  'm'
0492   42F0 CA FC 42        jp z, validcommand
0493   42F3 FE 38           cp $38 ;  's'
0494   42F5 CA FC 42        jp z, validcommand 
0495   42F8             
0496   42F8             ;bad command
0497   42F8 CD 3F 41        call promptcommand;
0498   42FB C9              ret    ; valid input was not entered
0499   42FC                 
0500   42FC             validcommand:    
0501   42FC 32 35 47        ld (command), a ;store command
0502   42FF                 
0503   42FF                 ;set the flag that we are taking room input
0504   42FF 3E 01           ld a, $01
0505   4301 32 34 47        ld (inputstate),a
0506   4304                 
0507   4304 CD 49 41        call promptroom;
0508   4307 C9              ret    
0509   4308             
0510   4308             ;convert the room that was enter to an int
0511   4308             ;this function t akes the address of the rightmost
0512   4308             ;hl address of rightmost byte
0513   4308             ;c number of bytes in the buffer
0514   4308             ;result is returned in bc
0515   4308             
0516   4308             handle_room_input:
0517   4308                 ;set up hl to be the buffer addr + num chars entered
0518   4308 21 28 47        ld hl, buffer
0519   430B ED 4B 32 47     ld bc, (bufferix)
0520   430F                 ;ld c,b
0521   430F              
0522   430F 16 00           ld d, 0
0523   4311 59              ld e, c
0524   4312 19              add hl, de
0525   4313 2B              dec hl
0526   4314 CD D0 46        call atoi ; result in bc
0527   4317                 
0528   4317 CD BC 43        call validate_move;
0529   431A FE 00           cp 0
0530   431C CA 4A 43        jp z, invalid_room
0531   431F             
0532   431F 79              ld a, c
0533   4320             ;    dec a
0534   4320 32 37 47        ld (roomentry), a
0535   4323                 
0536   4323 CD C5 42        call scroll;
0537   4326                 
0538   4326                 ;now we have to look at what the last option was
0539   4326 3A 35 47        ld a, (command)
0540   4329 FE 32           cp $32
0541   432B F5              push af
0542   432C CC D1 43        call z, move_player
0543   432F F1              pop af ; load flags back
0544   4330 FE 38           cp $38
0545   4332 CC 60 43        call z, shoot_arrow
0546   4335                 ;did moving the player result in death?
0547   4335 3A 3A 47        ld a, (gameover)
0548   4338 FE 01           cp 1
0549   433A C8              ret z
0550   433B                 
0551   433B                 ;reset input state to taking a command
0552   433B 3E 00           ld a, 0
0553   433D 32 34 47        ld (inputstate), a
0554   4340                 
0555   4340 CD C5 42        call scroll    
0556   4343 CD 97 41        call clearbuf;
0557   4346 CD 3F 41        call promptcommand;
0558   4349 C9              ret
0559   434A             invalid_room:
0560   434A CD C5 42        call scroll    
0561   434D CD 97 41        call clearbuf;
0562   4350 21 C3 48        ld hl, youcantgothatway
0563   4353 CD 7B 41        call printline
0564   4356 CD C5 42        call scroll
0565   4359 CD 51 42        call print_tunnels;
0566   435C CD 49 41        call promptroom;
0567   435F C9              ret
0568   4360             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0569   4360             ; handles player shooting an arrow
0570   4360             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0571   4360             shoot_arrow
0572   4360             
0573   4360 CD BF 44        call animate_arrow
0574   4363                 
0575   4363                 ;set the game over flag
0576   4363 3E 01           ld a, 1
0577   4365 32 3A 47        ld (gameover), a
0578   4368                 
0579   4368                 
0580   4368                 ;was the wumpus in that room
0581   4368 3A 37 47        ld a, (roomentry)
0582   436B 4F              ld c, a
0583   436C CD ED 43        call get_room_ptr ; result in hl
0584   436F 11 05 00        ld de, 5 ; 5 byte offset
0585   4372 19              add hl, de
0586   4373 7E              ld a, (hl) ; get flags bytes
0587   4374 E6 01           and 1
0588   4376 C2 86 43        jp nz, arrow_hit
0589   4379             arrow_miss:
0590   4379 CD 28 45        call animate_wumpus;
0591   437C 21 91 49        ld hl, playereatenmessage
0592   437F CD 7B 41        call printline
0593   4382 CD C5 42        call scroll
0594   4385 C9              ret
0595   4386             arrow_hit:
0596   4386 21 AF 49        ld hl, shootarrowmessage
0597   4389 CD 7B 41        call printline
0598   438C CD C5 42        call scroll
0599   438F             
0600   438F 21 CC 49        ld hl, victorymessage
0601   4392 CD 7B 41        call printline
0602   4395 CD C5 42        call scroll
0603   4398 C9              ret
0604   4399                 
0605   4399             ;this subrountine converts the room number its address
0606   4399             ;the address is returned in hl
0607   4399             set_room_addr
0608   4399 F5              push af
0609   439A C5              push bc
0610   439B D5              push de
0611   439C E5              push hl
0612   439D 3A 36 47        ld a, (curroom) ; room number (1 based)
0613   43A0 3D              dec a
0614   43A1 16 00           ld d, 0
0615   43A3 5F              ld e, a
0616   43A4 3E 06           ld a, 6; size of room in bytes (2 byte name, 3 rooms, 1 flags)
0617   43A6 CD 7A 46        call DE_Times_A ; result in hl now add it to base
0618   43A9 01 19 4A        ld bc, room1; load base addr
0619   43AC 09              add hl, bc ; add offset to base
0620   43AD                 
0621   43AD E5              push hl ;switch hl, bc'
0622   43AE C5              push bc
0623   43AF E1              pop hl
0624   43B0 C1              pop bc
0625   43B1 21 38 47        ld hl, currroomaddr
0626   43B4 71              ld (hl), c
0627   43B5 23              inc hl
0628   43B6 70              ld (hl), b
0629   43B7 E1              pop hl
0630   43B8 D1              pop de
0631   43B9 C1              pop bc
0632   43BA F1              pop af
0633   43BB C9              ret
0634   43BC             ;this subroutine checks if the player can go in specified direction
0635   43BC             ;c - the room to move to
0636   43BC             validate_move:
0637   43BC 2A 38 47        ld hl, (currroomaddr)
0638   43BF 23              inc hl
0639   43C0 23              inc hl
0640   43C1 06 03           ld b, 3
0641   43C3             validate_move_loop:    
0642   43C3 7E              ld a, (hl)
0643   43C4 B9              cp c
0644   43C5 CA CE 43        jp z, valid_move
0645   43C8 23              inc hl
0646   43C9 10 F8           djnz validate_move_loop
0647   43CB 3E 00           ld a, 0
0648   43CD C9              ret
0649   43CE             valid_move:
0650   43CE 3E 01           ld a, 1
0651   43D0 C9              ret
0652   43D1             ;moves the player to the selected room
0653   43D1             ;the select will be a valid choice
0654   43D1             move_player:
0655   43D1                  
0656   43D1 3A 37 47        ld a, (roomentry)
0657   43D4 32 36 47        ld (curroom), a
0658   43D7 CD 99 43        call set_room_addr
0659   43DA CD C4 41        call print_current_room;
0660   43DD CD DE 41        call handle_hazards
0661   43E0             
0662   43E0                 ;is the player dead?
0663   43E0 3A 3A 47        ld a, (gameover)
0664   43E3 FE 01           cp 1
0665   43E5 C8              ret z
0666   43E6                 
0667   43E6                 ; print tunnel
0668   43E6 CD 51 42        call print_tunnels
0669   43E9 CD 91 42        call print_flags
0670   43EC C9              ret
0671   43ED             ;
0672   43ED             ;compute the pointer for the room
0673   43ED             ;room number in register c
0674   43ED             ;address returned in hl
0675   43ED             get_room_ptr:
0676   43ED F5              push af
0677   43EE C5              push bc
0678   43EF D5              push de
0679   43F0 0D              dec c
0680   43F1 16 00           ld d, 0
0681   43F3 59              ld e, c ;room number
0682   43F4 3E 06           ld a, 6 ; size of room data
0683   43F6 CD 7A 46        call DE_Times_A ; result in HL
0684   43F9 11 19 4A        ld de, room1
0685   43FC 19              add hl, de
0686   43FD D1              pop de
0687   43FE C1              pop bc
0688   43FF F1              pop af
0689   4400 C9              ret
0690   4401             
0691   4401                 
0692   4401             set_up_game:
0693   4401                 
0694   4401                 ;clear buffer
0695   4401 CD 97 41        call clearbuf
0696   4404                 
0697   4404                 ;clear death byte
0698   4404 3E 00           ld a, 0
0699   4406 32 3A 47        ld (gameover), a
0700   4409             
0701   4409                 ;clear the last commadn
0702   4409 32 35 47        ld (command), a
0703   440C 32 34 47        ld (inputstate), a
0704   440F             
0705   440F                 ;put player at start
0706   440F 3E 01           ld a, 1
0707   4411 32 36 47        ld (curroom), a
0708   4414 CD 99 43        call set_room_addr
0709   4417                 
0710   4417 CD 52 44        call clear_all_flags
0711   441A             
0712   441A 0E 01           ld c, 1; wumpus bit
0713   441C                 ;ld a, 2;
0714   441C CD 13 47        call random_20 ; put random in a
0715   441F CD 4C 46        call set_room_flag  ; room in c, flag in a
0716   4422             
0717   4422 0E 04           ld c, 4; bat bit
0718   4424             ;    ld a, 4; 
0719   4424 CD 13 47        call random_20 ; put random in a
0720   4427 CD 4C 46        call set_room_flag  ; room in c, flag in a
0721   442A             
0722   442A 0E 04           ld c, 4; bat bit
0723   442C              ;   ld a, 6; 
0724   442C CD 13 47        call random_20 ; put random in a
0725   442F CD 4C 46        call set_room_flag  ; room in c, flag in a
0726   4432             
0727   4432              ;   call random_20 ; put random in a
0728   4432 0E 10           ld c, 16;pit bit
0729   4434             ;    ld a, 15;  
0730   4434 CD 13 47        call random_20 ; put random in a
0731   4437 CD 4C 46        call set_room_flag  ; room in c, flag in a
0732   443A             
0733   443A              ;   call random_20 ; put random in a
0734   443A 0E 10           ld c, 16;  pit bit
0735   443C               ;  ld a, 16;  room#
0736   443C CD 13 47        call random_20 ; put random in a 
0737   443F CD 4C 46        call set_room_flag  ; room in c, flag in a
0738   4442                 
0739   4442 CD C5 42        call scroll
0740   4445 CD C4 41        call print_current_room;
0741   4448 CD 51 42        call print_tunnels; calls scroll
0742   444B CD 91 42        call print_flags;
0743   444E CD 3F 41        call promptcommand
0744   4451             
0745   4451 C9              ret
0746   4452             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0747   4452             ;Sets all room flags back to 0 (so the flags don't accumulate)
0748   4452             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0749   4452             clear_all_flags
0750   4452                 
0751   4452 3E 00           ld a, 0
0752   4454 21 19 4A        ld hl, room1
0753   4457 01 05 00        ld bc, 5
0754   445A 09              add hl, bc
0755   445B                 
0756   445B 11 06 00        ld de, 6
0757   445E 06 14           ld b, 20 ; # of room
0758   4460             clear_flags_loop
0759   4460                 ;add 6 to get the addr of the next byte
0760   4460 77              ld (hl), a ; zero out the byte
0761   4461 19              add hl, de ; jump ahead six bytes to the next flags byte
0762   4462 10 FC           djnz clear_flags_loop
0763   4464                  
0764   4464 C9              ret
0765   4465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0766   4465             ;animates the player falling down a pit
0767   4465             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0768   4465             animate_pit_fall
0769   4465 CD 2A 0A        call CLS
0770   4468                 ;draw the pit walls
0771   4468 ED 5B 0C 40     ld de, (D_FILE)
0772   446C 13              inc de ; skip cr at start of D_FILE
0773   446D 06 14           ld b, 20
0774   446F             draw_pit_loop:    
0775   446F C5              push bc
0776   4470                 
0777   4470 06 21           ld b, 33 ; 32 cols on screen
0778   4472 21 EB 49        ld hl, pitwalls
0779   4475             draw_pit_inner:
0780   4475 ED A0           ldi ;copies (hl) to (de)
0781   4477 10 FC           djnz draw_pit_inner
0782   4479 13              inc de ; skip newline
0783   447A                 
0784   447A C1              pop bc
0785   447B 10 F2           djnz draw_pit_loop
0786   447D                 
0787   447D                 ; now draw the player falling
0788   447D 06 14           ld b, 20
0789   447F 2A 0C 40        ld hl, (D_FILE)
0790   4482 11 10 00        ld de, 16
0791   4485 19              add hl, de ;draw location
0792   4486 54              ld d, h ; copy hl to de
0793   4487 5D              ld e, l ;
0794   4488             fallloop:
0795   4488                 ;erase last fall
0796   4488 21 12 4A        ld hl, clearfallingplayer;  ; copy the character from hl (memory) to screen (de)
0797   448B ED A0           ldi 
0798   448D ED A0           ldi
0799   448F ED A0           ldi
0800   4491                 
0801   4491                 ;draw fall at new location (go to next line)
0802   4491 C5              push bc
0803   4492 62              ld h, d
0804   4493 6B              ld l, e
0805   4494 01 1E 00        ld bc, 30
0806   4497 09              add hl, bc
0807   4498 54              ld d, h
0808   4499 5D              ld e, l
0809   449A C1              pop bc 
0810   449B                
0811   449B 21 0F 4A        ld hl, fallingplayer;  ; copy the character from hl (memory) to screen (de)
0812   449E ED A0           ldi
0813   44A0 ED A0           ldi
0814   44A2 ED A0           ldi
0815   44A4             
0816   44A4                 ;subtract 3 from de so it is ok
0817   44A4 1B              dec de
0818   44A5 1B              dec de
0819   44A6 1B              dec de
0820   44A7             
0821   44A7                 ;do a bunch of nops to slow down the looping
0822   44A7 CD AD 44        call waste_time    
0823   44AA 10 DC           djnz fallloop;
0824   44AC                 
0825   44AC C9              ret
0826   44AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0827   44AD             ;
0828   44AD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0829   44AD             waste_time:    
0830   44AD C5              push bc
0831   44AE 06 0A           ld b, 10
0832   44B0             pit_waste_time:    
0833   44B0 CD B7 44        call donothing
0834   44B3 10 FB           djnz pit_waste_time
0835   44B5 C1              pop bc
0836   44B6 C9              ret
0837   44B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0838   44B7             ;loop to waste time between animation frames
0839   44B7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0840   44B7             donothing:
0841   44B7 C5              push bc
0842   44B8 06 FF           ld b, $ff
0843   44BA             donothingloop:
0844   44BA 00              nop
0845   44BB 10 FD           djnz donothingloop
0846   44BD C1              pop bc
0847   44BE C9              ret
0848   44BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0849   44BF             ;animates the arrow flying
0850   44BF             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0851   44BF             animate_arrow:
0852   44BF             
0853   44BF CD F2 44        call draw_tunnel
0854   44C2                 
0855   44C2                 ;now animate the arrow flying
0856   44C2                 
0857   44C2 2A 0C 40        ld hl, (D_FILE)
0858   44C5 01 E8 00        ld bc, 232 ; offset to start drawing at
0859   44C8 09              add hl, bc
0860   44C9 54              ld d, h
0861   44CA 5D              ld e, l
0862   44CB                 
0863   44CB 06 1D           ld b, 29; loop counter
0864   44CD             draw_arrow_loop:
0865   44CD                 
0866   44CD 3E 00           ld a, $00 ; space to erase the square behind the arrow
0867   44CF 12              ld (de), a 
0868   44D0 13              inc de
0869   44D1                 
0870   44D1 21 0C 4A        ld hl, arrow
0871   44D4 ED A0           ldi ; copy the room label from hl (memory) to screen (de)
0872   44D6 ED A0           ldi
0873   44D8 ED A0           ldi
0874   44DA                 
0875   44DA                 ;subtact 3 off of de so the drawing starts
0876   44DA                 ;on square over from where the last arrow started
0877   44DA 1B              dec de
0878   44DB 1B              dec de
0879   44DC 1B              dec de
0880   44DD                 
0881   44DD C5              push bc
0882   44DE 06 0F           ld b, $0F
0883   44E0             arrow_waste_time:
0884   44E0 CD B7 44        call donothing
0885   44E3 10 FB           djnz arrow_waste_time; 
0886   44E5 C1              pop bc
0887   44E6                 
0888   44E6 10 E5           djnz draw_arrow_loop
0889   44E8                 
0890   44E8                 ;overwrite the last arrow drawn
0891   44E8 21 F8 49        ld hl, blanks
0892   44EB ED A0           ldi
0893   44ED ED A0           ldi
0894   44EF ED A0           ldi
0895   44F1 C9              ret
0896   44F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0897   44F2             ;draws the two horizontal strips of cave
0898   44F2             ;used by bats and arrow animation
0899   44F2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0900   44F2             draw_tunnel
0901   44F2 CD 2A 0A        call CLS
0902   44F5                 
0903   44F5 2A 0C 40        ld hl, (D_FILE)
0904   44F8 23              inc hl
0905   44F9 CD 13 46        call draw_horizontal_walls;
0906   44FC 11 C6 00        ld de, 198; skip 6 lines
0907   44FF 19              add hl, de
0908   4500 CD 13 46        call draw_horizontal_walls;
0909   4503 C9              ret
0910   4504             
0911   4504             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
0912   4504             animate_bats
0913   4504 CD F2 44        call draw_tunnel
0914   4507                 
0915   4507                 ;draw the bat
0916   4507                 
0917   4507 2A 0C 40        ld hl, (D_FILE)
0918   450A 01 0A 01        ld bc, 266
0919   450D 09              add hl, bc
0920   450E 54              ld d, h
0921   450F 5D              ld e, l
0922   4510                 
0923   4510 06 1C           ld b, 28
0924   4512             animate_bat_loop:
0925   4512 C5              push bc
0926   4513 D5              push de
0927   4514 CD D3 45        call clear_last_bat
0928   4517 13              inc de
0929   4518 CD E0 45        call draw_bat
0930   451B             
0931   451B 06 0F           ld b, $0F
0932   451D             bats_waste_time:
0933   451D CD B7 44        call donothing
0934   4520 10 FB           djnz bats_waste_time;
0935   4522             
0936   4522 D1              pop de
0937   4523 C1              pop bc
0938   4524 13              inc de  ;draw one square over
0939   4525                 
0940   4525 10 EB           djnz animate_bat_loop
0941   4527 C9              ret
0942   4528             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    
0943   4528             animate_wumpus
0944   4528                 ;clear screen
0945   4528 CD 2A 0A        call CLS
0946   452B                 
0947   452B                 ;de - offset for top
0948   452B                 ;hl - offset for bottom
0949   452B 11 22 00        ld de, 34
0950   452E 21 53 02        ld hl, 595
0951   4531                 
0952   4531 06 07           ld b, 7
0953   4533             chomp_loop
0954   4533                 
0955   4533 3E 00           ld a, $00 ; inverse space
0956   4535 CD AA 45        call draw_teeth;
0957   4538                  
0958   4538 CD FD 45        call de_plus_33
0959   453B                 
0960   453B D5              push de
0961   453C 54              ld d, h
0962   453D 5D              ld e, l
0963   453E CD 08 46        call de_minus_33
0964   4541 62              ld h, d
0965   4542 6B              ld l, e
0966   4543 D1              pop de
0967   4544                 
0968   4544                 
0969   4544 3E 80           ld a, $80 ; inverse space
0970   4546                 
0971   4546 CD AA 45        call draw_teeth;
0972   4549 CD AD 44        call waste_time
0973   454C 10 E5           djnz chomp_loop
0974   454E                 
0975   454E                 ;wait
0976   454E                 
0977   454E                 ;draw eyes
0978   454E CD AD 44        call waste_time;
0979   4551 CD 55 45        call draw_wumpus_eyes
0980   4554 C9              ret
0981   4555             ;    
0982   4555             draw_wumpus_eyes
0983   4555 11 4B 00        ld de, 75
0984   4558 CD 92 45        call draw_eye_tops;
0985   455B 11 CF 00        ld de, 207
0986   455E CD 92 45        call draw_eye_tops;
0987   4561 11 6C 00        ld de, 108
0988   4564 CD 81 45        call draw_eye_sides;
0989   4567 11 7B 00        ld de, 123
0990   456A CD 81 45        call draw_eye_sides;
0991   456D CD 71 45        call draw_eye_balls;
0992   4570 C9              ret
0993   4571             draw_eye_balls
0994   4571 2A 0C 40        ld hl, (D_FILE)
0995   4574 11 90 00        ld de, 144
0996   4577 19              add hl, de
0997   4578 3E 08           ld a, $08
0998   457A 77              ld (hl), a
0999   457B 11 09 00        ld de, 9
1000   457E 19              add hl, de
1001   457F 77              ld (hl), a
1002   4580 C9              ret
1003   4581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1004   4581             ;
1005   4581             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1006   4581             draw_eye_sides:
1007   4581 2A 0C 40        ld hl, (D_FILE)
1008   4584 19              add hl, de
1009   4585 54              ld d, h
1010   4586 5D              ld e, l
1011   4587 3E 80           ld a, $80
1012   4589 06 03           ld b, 3
1013   458B             veyes_loop:
1014   458B 12              ld (de), a
1015   458C CD FD 45        call de_plus_33
1016   458F 10 FA           djnz veyes_loop
1017   4591                 
1018   4591 C9              ret
1019   4592                 
1020   4592                 
1021   4592             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1022   4592             ;draw eyes
1023   4592             ;de is offset
1024   4592             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1025   4592             draw_eye_tops:
1026   4592 2A 0C 40        ld hl, (D_FILE);
1027   4595 19              add hl, de
1028   4596                 
1029   4596 CD A1 45        call horiz_eyes
1030   4599                 
1031   4599 11 08 00        ld de, 8
1032   459C 19              add hl, de 
1033   459D                     
1034   459D CD A1 45        call horiz_eyes
1035   45A0                 
1036   45A0 C9              ret
1037   45A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1038   45A1             ;loop to draw eyes
1039   45A1             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1040   45A1             horiz_eyes:  
1041   45A1 3E 80           ld a, $80
1042   45A3 06 04           ld b, 4
1043   45A5             eyeloop1:    
1044   45A5 77              ld (hl), a
1045   45A6 23              inc hl
1046   45A7 10 FC           djnz eyeloop1
1047   45A9 C9              ret
1048   45AA                 
1049   45AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;f;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1050   45AA             ;draw teeth
1051   45AA             ;draw jaws
1052   45AA             ;de offset for upper teeth
1053   45AA             ;hl for lower
1054   45AA             ;a is char to draw with
1055   45AA             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1056   45AA             draw_teeth:
1057   45AA F5              push af
1058   45AB C5              push bc
1059   45AC D5              push de
1060   45AD E5              push hl
1061   45AE             
1062   45AE E5              push hl
1063   45AF 2A 0C 40        ld hl, (D_FILE)
1064   45B2 19              add hl, de
1065   45B3 54              ld d,h
1066   45B4 5D              ld e,l
1067   45B5                 
1068   45B5 CD C7 45        call draw_upper_teeth;
1069   45B8             
1070   45B8 D1              pop de
1071   45B9 2A 0C 40        ld hl, (D_FILE)
1072   45BC 19              add hl, de
1073   45BD 54              ld d, h
1074   45BE 5D              ld e, l
1075   45BF CD C7 45        call draw_upper_teeth;
1076   45C2                 
1077   45C2 E1              pop hl
1078   45C3 D1              pop de
1079   45C4 C1              pop bc
1080   45C5 F1              pop af
1081   45C6 C9              ret
1082   45C7                 
1083   45C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1084   45C7             ;start drawing upper teeth at offset in de
1085   45C7             ;a is char to draw
1086   45C7             ;de in unchanged
1087   45C7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1088   45C7             draw_upper_teeth:
1089   45C7 D5              push de
1090   45C8                 
1091   45C8 06 05           ld b,5 ;draw 5 teeth
1092   45CA             draw_upr_teeth_loop
1093   45CA C5              push bc
1094   45CB CD 1E 46        call draw_upper_tooth
1095   45CE                 
1096   45CE C1              pop bc
1097   45CF 10 F9           djnz draw_upr_teeth_loop
1098   45D1                 
1099   45D1 D1              pop de
1100   45D2 C9              ret
1101   45D3               
1102   45D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1103   45D3             ; de: offset to draw at 
1104   45D3             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1105   45D3             clear_last_bat:
1106   45D3 D5              push de
1107   45D4 3E 00           ld a, $00
1108   45D6 06 04           ld b, 4
1109   45D8             clear_bat_loop:    
1110   45D8 12              ld (de), a
1111   45D9 CD FD 45        call de_plus_33 ;add 33
1112   45DC 10 FA           djnz clear_bat_loop
1113   45DE D1              pop de
1114   45DF C9              ret
1115   45E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1116   45E0             ; de: offset to draw at 
1117   45E0             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1118   45E0             draw_bat:
1119   45E0 D5              push de
1120   45E1                 
1121   45E1                 ;draw the bat
1122   45E1 3E 02           ld a, $02
1123   45E3 12              ld (de), a
1124   45E4 13              inc de
1125   45E5 3E 06           ld a, $06
1126   45E7 12              ld (de), a
1127   45E8 1B              dec de
1128   45E9                 
1129   45E9 CD FD 45        call de_plus_33
1130   45EC                 ;draw adventurer (upside down)
1131   45EC 3E 3B           ld a, _V
1132   45EE 12              ld (de), a
1133   45EF CD FD 45        call de_plus_33
1134   45F2 3E 15           ld a, _PL
1135   45F4 12              ld (de), a    ;draw + for arms
1136   45F5 CD FD 45        call de_plus_33 ;add 33
1137   45F8 3E 1C           ld a, _0
1138   45FA 12              ld (de), a     ;draw 0 for head
1139   45FB D1              pop de
1140   45FC C9              ret
1141   45FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1142   45FD             ;adds 33 to de (useful for jumping down a row in the D_FILE)
1143   45FD             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1144   45FD             de_plus_33:
1145   45FD E5              push hl
1146   45FE 62              ld h, d
1147   45FF 6B              ld l, e
1148   4600 11 21 00        ld de, 33
1149   4603 19              add hl, de
1150   4604 54              ld d, h
1151   4605 5D              ld e, l
1152   4606 E1              pop hl
1153   4607 C9              ret
1154   4608             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1155   4608             ;adds 33 to de (useful for jumping down a row in the D_FILE)
1156   4608             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1157   4608             de_minus_33:
1158   4608 62              ld h, d
1159   4609 6B              ld l, e
1160   460A 16 00           ld d, 0
1161   460C 1E 21           ld e, 33
1162   460E ED 52           sbc hl, de
1163   4610 54              ld d, h
1164   4611 5D              ld e, l
1165   4612 C9              ret
1166   4613             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1167   4613             ; draws 6 black lines across the screen
1168   4613             ; hl contains start addr
1169   4613             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1170   4613             draw_horizontal_walls:
1171   4613             
1172   4613 06 06          ld b, 6
1173   4615             hwall_loop:    
1174   4615 C5              push bc
1175   4616 CD 43 46        call draw_black_line
1176   4619 23              inc hl
1177   461A C1              pop bc
1178   461B 10 F8           djnz hwall_loop
1179   461D C9              ret
1180   461E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1181   461E             ;draw am upper tooth
1182   461E             ;hl the starting offset for the tooth
1183   461E             ;a; the char to draw
1184   461E             ;de is updated to be the last draw position
1185   461E             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1186   461E             draw_upper_tooth:
1187   461E                 ;loop four times
1188   461E 06 04           ld b, 4
1189   4620             upper_tooth_loop_1:    
1190   4620 12              ld (de), a   ;draw the tooth
1191   4621 CD FD 45        call de_plus_33 ;down
1192   4624 13              inc de ; over
1193   4625 10 F9           djnz upper_tooth_loop_1
1194   4627                 
1195   4627 06 03           ld b, 3
1196   4629 CD 08 46        call de_minus_33 ; up a row
1197   462C 1B              dec de
1198   462D                 
1199   462D             upper_tooth_loop_2:
1200   462D CD 08 46        call de_minus_33 ; up a row
1201   4630 13              inc de ; over 1
1202   4631 12              ld (de), a
1203   4632 10 F9           djnz upper_tooth_loop_2
1204   4634 C9              ret
1205   4635                 
1206   4635             draw_intro:
1207   4635 ED 5B 0C 40     ld de, (D_FILE) ;setup draw location
1208   4639 13              inc de ; skip initial cr    
1209   463A 21 3B 47        ld hl, title_art;
1210   463D 01 08 01        ld bc, 264 ; number of chars to copy
1211   4640 ED B0           ldir ; copy the room label from hl (memory) to screen (de)    
1212   4642 C9              ret
1213   4643             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1214   4643             ;hl contains start of line
1215   4643             draw_black_line:
1216   4643 06 20           ld b, 32
1217   4645 3E 80           ld a, $80; inverse space
1218   4647             drawloop:    
1219   4647 77              ld (hl), a ; copy inverse space to screen
1220   4648 23              inc hl
1221   4649 10 FC           djnz drawloop
1222   464B C9              ret
1223   464C             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1224   464C             ;This subroutine set the flag in a room then sets teh flags in the adjacent rooms
1225   464C             ;a contains room number to set flag for
1226   464C             ;c contains the bit flag to OR onto the room
1227   464C             ;1 = wumpus | 2 = next to wumpus | 4 = bat | 8 = next to bats | 16 = pit | 32 = next to pit
1228   464C             set_room_flag:
1229   464C                 
1230   464C                 ;convert it to a ptr
1231   464C                  
1232   464C C5              push bc
1233   464D 4F              ld c, a
1234   464E CD ED 43        call get_room_ptr ; takes # in c, puts addr in hl
1235   4651 C1              pop bc
1236   4652 E5              push hl; save room address
1237   4653                 
1238   4653 16 00           ld d, 0
1239   4655 1E 05           ld e, 5; add 5 bytes to get the flags byte
1240   4657 19              add hl, de
1241   4658                 
1242   4658                 ;set the requested bit
1243   4658 7E              ld a, (hl)
1244   4659 B1              or c
1245   465A 77              ld (hl), a; store the bat bit
1246   465B                 
1247   465B                 ;shift the bit left and appy the flag to the adjacent rooms
1248   465B CB 21           sla c
1249   465D E1              pop hl; restore room address for subroutine
1250   465E CD 62 46        call set_adjacent_room_flags
1251   4661                 
1252   4661 C9              ret
1253   4662             ;This subroutine set the flags adjacent in the room adjacent to one that has bats
1254   4662             ;addr of room is in hl
1255   4662             ;c = value to OR onto the flags
1256   4662             set_adjacent_room_flags:
1257   4662                 ;add 2 bytes to room addr to get to the adjacent rooms
1258   4662 23              inc hl
1259   4663 23              inc hl
1260   4664                 ;loop three times
1261   4664 06 03           ld b, 3 ; loop counter
1262   4666             flag_loop:
1263   4666 E5              push hl; save addr of adjacent room byte
1264   4667 C5              push bc; save loop counter
1265   4668 4E              ld c, (hl);get the number of the room that is adjacent to hl
1266   4669                 
1267   4669                 ;convert it to a ptr
1268   4669 CD ED 43        call get_room_ptr ; addr in hl
1269   466C                 
1270   466C 16 00           ld d,0;add five bytes to get the flags offset
1271   466E 1E 05           ld e,5
1272   4670 19              add hl, de
1273   4671 7E              ld a, (hl) ; get the flags byte
1274   4672 C1              pop bc ; restore loop counter or bit to OR
1275   4673 B1              or c ; set bit
1276   4674 77              ld (hl), a ;store it back
1277   4675 E1              pop hl ;restore addr of adjacent room byte
1278   4676                 
1279   4676 23              inc hl ; increment src add
1280   4677 10 ED           djnz flag_loop
1281   4679 C9              ret
1282   467A             
1283   467A             
1284   467A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1285   467A             ;Inputs:
1286   467A             ;     DE and A are factors
1287   467A             ;Outputs:
1288   467A             ;     A is not changed
1289   467A             ;     B is 0
1290   467A             ;     C is not changed
1291   467A             ;     DE is not changed
1292   467A             ;     HL is the product
1293   467A             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1294   467A             DE_Times_A:
1295   467A             
1296   467A             ;Time:
1297   467A             ;     342+6x
1298   467A             ;
1299   467A 06 08            ld b,8          ;7           7
1300   467C 21 00 00         ld hl,0         ;10         10
1301   467F 29                 add hl,hl     ;11*8       88
1302   4680 07                 rlca          ;4*8        32
1303   4681 30 01              jr nc,$+3     ;(12|18)*8  96+6x
1304   4683 19                   add hl,de   ;--         --
1305   4684 10 F9              djnz $-5      ;13*7+8     99
1306   4686 C9               ret             ;10         10    
1307   4687             Multiply:                        ; this routine performs the operation HL=D*E
1308   4687 21 00 00      ld hl,0                        ; HL is used to accumulate the result
1309   468A 7A            ld a,d                         ; checking one of the factors; returning if it is zero
1310   468B B7            or a
1311   468C C8            ret z
1312   468D 42            ld b,d                         ; one factor is in B
1313   468E 54            ld d,h                         ; clearing D (H is zero), so DE holds the other factor
1314   468F             MulLoop:                         ; adding DE to HL exactly B times
1315   468F 19            add hl,de
1316   4690 10 FD         djnz MulLoop
1317   4692 C9            ret
1318   4693               
1319   4693             ;this subroutine will convert a number in 'a' to a chars
1320   4693             ;a - the number to convert
1321   4693             ;hl - the result will be placed in memory at the destination address (right justified)
1322   4693             itoa:
1323   4693                 ;push af
1324   4693 4F              ld c, a
1325   4694 16 0A           ld d, 10
1326   4696 CD C2 46        call C_Div_D ; puts remainder in a
1327   4699                 
1328   4699                 ;convert a to a char code
1329   4699 5F              ld e, a; save quotient
1330   469A C5              push bc ; save quotient
1331   469B C6 1C           add a, $1c ; convert remainder to a char code
1332   469D 77              ld (hl), a ; store char
1333   469E 2B              dec hl
1334   469F                 
1335   469F C1              pop bc  ; retore queotient  
1336   46A0 79              ld a, c
1337   46A1 FE 00           cp 0 ;if a is 0, well are done
1338   46A3 C2 93 46        jp nz, itoa
1339   46A6 C9              ret
1340   46A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1341   46A7             ;take char in c
1342   46A7             ;puts code into c
1343   46A7             ;c = $FF if char is invalid
1344   46A7             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1345   46A7             char_to_num:
1346   46A7 F5              push af
1347   46A8 D5              push de
1348   46A9 E5              push hl
1349   46AA                      
1350   46AA 1E 1C           ld e, $1C   ; subtract off $1C to convert it to a number
1351   46AC 79              ld a, c     ; load char into accumulator
1352   46AD 93              sub e   ;subract $1C from char
1353   46AE FA BC 46        jp m, badchar  ; char was less than "0"
1354   46B1                 
1355   46B1                 ; char is still loaded into d
1356   46B1                 ; load char code for "9"
1357   46B1                 ; subtract that from the char
1358   46B1 57              ld d, a;  
1359   46B2 3E 09           ld a, $09 ; char code for 9
1360   46B4 92              sub d;
1361   46B5 FA BC 46        jp m, badchar; char was greater than "9"
1362   46B8                 
1363   46B8                 ;char (in d) is valid and is 0-9
1364   46B8 4A              ld c, d;
1365   46B9 C3 BE 46        jp goodchar
1366   46BC             badchar:
1367   46BC 0E FF           ld c, $ff
1368   46BE             goodchar:
1369   46BE E1              pop hl
1370   46BF D1              pop de
1371   46C0 F1              pop af
1372   46C1 C9              ret
1373   46C2                 
1374   46C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1375   46C2             ;this code taken from http://z80-heaven.wikidot.com/math#toc39
1376   46C2             ;Inputs:
1377   46C2             ;     C is the numerator
1378   46C2             ;     D is the denominator
1379   46C2             ;Outputs:
1380   46C2             ;     A is the remainder
1381   46C2             ;     B is 0
1382   46C2             ;     C is the result of C/D
1383   46C2             ;     D,E,H,L are not changed
1384   46C2             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1385   46C2             C_Div_D:
1386   46C2 06 08           ld b,8
1387   46C4 AF              xor a
1388   46C5 CB 21           sla c
1389   46C7 17              rla
1390   46C8 BA              cp d
1391   46C9 38 02           jr c,$+4
1392   46CB 0C              inc c
1393   46CC 92              sub d
1394   46CD 10 F6           djnz $-8
1395   46CF C9              ret
1396   46D0             ;converts text in a buffer to an integer
1397   46D0             ;this function t akes the address of the rightmost
1398   46D0             ;hl address of rightmost byte
1399   46D0             ;c number of bytes in the buffer
1400   46D0             ;result is returned in bc
1401   46D0             atoi:
1402   46D0                 ;bc will be the sum
1403   46D0                 ;de will be the place value (power of 10)
1404   46D0                 ;hl will contain the src address
1405   46D0                 ;a will be loop counter
1406   46D0 79              ld a, c    
1407   46D1 01 00 00        ld bc, $0000
1408   46D4 11 01 00        ld de, $0001
1409   46D7             atoiloop:
1410   46D7 F5              push af ; save loop counter
1411   46D8 E5              push hl ; save src addr (free up hl)
1412   46D9 C5              push bc ; save sum (free up bc)
1413   46DA                 
1414   46DA 4E              ld c, (hl)
1415   46DB CD A7 46        call char_to_num;
1416   46DE 79              ld a, c
1417   46DF FE FF           cp $FF
1418   46E1 CA FE 46        jp z, invalid
1419   46E4                 
1420   46E4                 ;multiply de * the place value (de)
1421   46E4 D5              push de
1422   46E5 CD 02 47        call Mul8 ; HL=DE*A
1423   46E8 D1              pop de
1424   46E9                 
1425   46E9                 ;move temp to bc
1426   46E9 44              ld b, h
1427   46EA 4D              ld c, l
1428   46EB                 
1429   46EB                 ;add to the sum
1430   46EB E1              pop hl ; restore sum to hl
1431   46EC 09              add hl, bc
1432   46ED 44              ld b, h ; copy sum back into bc
1433   46EE 4D              ld c, l
1434   46EF                 
1435   46EF                 ;multiply the place value x 10
1436   46EF 3E 0A           ld a, 10
1437   46F1 CD 02 47        call Mul8 ; HL=DE*A
1438   46F4 54              ld d, h
1439   46F5 5D              ld e, l
1440   46F6                 
1441   46F6 E1              pop hl ; restore addr
1442   46F7 2B              dec hl
1443   46F8                 
1444   46F8 F1              pop af ; restore loop counter
1445   46F9 3D              dec a
1446   46FA C2 D7 46        jp nz, atoiloop;
1447   46FD             
1448   46FD                 ;finished loop - number was valid
1449   46FD               ;  ld hl, $01
1450   46FD              ;   push hl
1451   46FD C9              ret
1452   46FE             invalid:
1453   46FE C1              pop bc
1454   46FF E1              pop hl
1455   4700 F1              pop af
1456   4701             ;    ld bc, $FFFF
1457   4701             ;  push bc
1458   4701 C9              ret
1459   4702             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1460   4702             ;  this routine performs the operation HL=DE*A
1461   4702             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1462   4702             Mul8:                            ; this routine performs the operation HL=DE*A
1463   4702 21 00 00      ld hl,0                        ; HL is used to accumulate the result
1464   4705 06 08         ld b,8                         ; the multiplier (A) is 8 bits wide
1465   4707             Mul8Loop:
1466   4707 0F            rrca                           ; putting the next bit into the carry
1467   4708 D2 0C 47      jp nc,Mul8Skip                 ; if zero, we skip the addition (jp is used for speed)
1468   470B 19            add hl,de                      ; adding to the product if necessary
1469   470C             Mul8Skip:
1470   470C CB 23         sla e                          ; calculating the next auxiliary product by shifting
1471   470E CB 12         rl d                           ; DE one bit leftwards (refer to the shift instructions!)
1472   4710 10 F5         djnz Mul8Loop
1473   4712 C9            ret
1474   4713             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1475   4713             ;return a random number 1 <= 20 in a
1476   4713             ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1477   4713             random_20
1478   4713 C5              push bc
1479   4714 ED 5F           ld a, r;
1480   4716 E6 7F           and $7f ;01111111
1481   4718 0E 14           ld c, 20
1482   471A             toobig:
1483   471A 91              sub c
1484   471B FA 21 47        jp m, rnd_done ; jump on no minus sign
1485   471E C3 1A 47        jp toobig;
1486   4721             rnd_done:
1487   4721 81              add a, c
1488   4722 3C              inc a ;0 is not a valid room
1489   4723 C1              pop bc
1490   4724 C9              ret
1491   4725             
1492   4725             ;;;;;;;;;;;;;;;;;;;;;;;;;;VARIABlES;;;;;;;;;;;;;;;;;;;;;;;;;    
1493   4725             kbstatus:
1494   4725 FF FF           DEFB $ff, $ff;
1495   4727             keydown:
1496   4727 00              DEFB $00;
1497   4728             buffer:
1498   4728 FF FF FF FF     DEFB $ff, $ff, $ff, $ff, $ff, $ff,$ff, $ff,$ff, $ff; storage for the 2 keyboard code bytes
1498   472C FF FF FF FF 
1498   4730 FF FF 
1499   4732             bufferix:
1500   4732 00 00           DEFB $00, $00
1501   4734             inputstate:
1502   4734 00              DEFB $00 ; 0 = accepting m | s,  1 = accepting room | 2 = accepting y/n
1503   4735             command:
1504   4735 00              DEFB $00 ;   m = move s = shoot
1505   4736             curroom:
1506   4736 01              DEFB $01 ;  
1507   4737             roomentry:
1508   4737 00              DEFB $00    
1509   4738             currroomaddr:
1510   4738 00 00           DEFB $00, $00
1511   473A             gameover:
1512   473A 00              DEFB $00
1513   473B             title_art:
1514   473B 05 85 00 05     DEFB 5, 133,   0,   5, 133, 0, 5, 133,   0, 132,   1,   0, 132,   1,   5, 133,   0,   7, 0, 0,   0,   0,   0, 128, 128, 128, 128,   0,   0,   0,   0,   0, 118
1514   473F 85 00 05 85 
1514   4743 00 84 01 00 
1514   4747 84 01 05 85 
1514   474B 00 07 00 00 
1514   474F 00 00 00 80 
1514   4753 80 80 80 00 
1514   4757 00 00 00 00 
1514   475B 76 
1515   475C 07 84 00 05     DEFB 7, 132,   0,   5, 133, 0, 7, 129,   0, 133,   0,   0, 133,   0,   7, 132,   0, 130, 0, 0,   0,   0, 128, 128, 128, 128, 128, 128, 128,   0,   0,   0, 118
1515   4760 85 00 07 81 
1515   4764 00 85 00 00 
1515   4768 85 00 07 84 
1515   476C 00 82 00 00 
1515   4770 00 00 80 80 
1515   4774 80 80 80 80 
1515   4778 80 00 00 00 
1515   477C 76 
1516   477D 05 85 00 82     DEFB 5, 133,   0, 130, 129, 0, 5, 133,   0, 133,   0,   0, 133,   0,   5, 133,   0, 130, 0, 0,   0, 128, 128,   5, 133, 128,   5, 133, 128, 128,   0,   0, 118
1516   4781 81 00 05 85 
1516   4785 00 85 00 00 
1516   4789 85 00 05 85 
1516   478D 00 82 00 00 
1516   4791 00 80 80 05 
1516   4795 85 80 05 85 
1516   4799 80 80 00 00 
1516   479D 76 
1517   479E 00 00 00 00     DEFB 0,   0,   0,   0,   0, 0, 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 0, 0, 128,   0, 128, 129, 130, 128, 129, 130, 128,   0, 128,   0, 118
1517   47A2 00 00 00 00 
1517   47A6 00 00 00 00 
1517   47AA 00 00 00 00 
1517   47AE 00 00 00 00 
1517   47B2 80 00 80 81 
1517   47B6 82 80 81 82 
1517   47BA 80 00 80 00 
1517   47BE 76 
1518   47BF 05 00 85 85     DEFB 5,   0, 133, 133,   0, 5, 7, 131, 132,   0,   7, 132, 133,   0, 133,   0,   7,   3, 0, 0, 128,   0, 128, 128, 137, 128, 137, 128, 128,   0, 128,   0, 118
1518   47C3 00 05 07 83 
1518   47C7 84 00 07 84 
1518   47CB 85 00 85 00 
1518   47CF 07 03 00 00 
1518   47D3 80 00 80 80 
1518   47D7 89 80 89 80 
1518   47DB 80 00 80 00 
1518   47DF 76 
1519   47E0 05 00 85 85     DEFB 5,   0, 133, 133,   0, 5, 5,   0, 133,   0, 130, 129, 133,   0, 133,   0, 130, 131, 0, 0, 128,   0, 128, 136, 136, 136, 136, 136, 128,   0, 128,   0, 118
1519   47E4 00 05 05 00 
1519   47E8 85 00 82 81 
1519   47EC 85 00 85 00 
1519   47F0 82 83 00 00 
1519   47F4 80 00 80 88 
1519   47F8 88 88 88 88 
1519   47FC 80 00 80 00 
1519   4800 76 
1520   4801 05 83 85 85     DEFB 5, 131, 133, 133,   0, 5, 5,   0, 133,   0,   5,   0, 133,   0, 133,   0,   0, 133, 0, 0,   0, 128,   0, 128, 138, 128, 138, 128,   0, 128,   0,   0, 118
1520   4805 00 05 05 00 
1520   4809 85 00 05 00 
1520   480D 85 00 85 00 
1520   4811 00 85 00 00 
1520   4815 00 80 00 80 
1520   4819 8A 80 8A 80 
1520   481D 00 80 00 00 
1520   4821 76 
1521   4822 07 00 84 85     DEFB 7,   0, 132, 133, 131, 5, 5,   0, 133,   0,   5,   0, 133, 131, 129,   0, 131, 129, 0, 0, 128,   0, 128,   0, 128, 128, 128,   0, 128,   0, 128,   0, 118
1521   4826 83 05 05 00 
1521   482A 85 00 05 00 
1521   482E 85 83 81 00 
1521   4832 83 81 00 00 
1521   4836 80 00 80 00 
1521   483A 80 80 80 00 
1521   483E 80 00 80 00 
1521   4842 76 
1522   4843             welcome:
1523   4843 3C 2A 31 28     DEFB _W, _E, _L, _C, _O, _M, _E, $00, _T, _O, $00, _H, _U, _N, _T, $00, _T, _H, _E, $00, _W, _U, _M, _P, _U, _S, $FF;
1523   4847 34 32 2A 00 
1523   484B 39 34 00 2D 
1523   484F 3A 33 39 00 
1523   4853 39 2D 2A 00 
1523   4857 3C 3A 32 35 
1523   485B 3A 38 FF 
1524   485E             welcome2:
1525   485E 34 37 2E 2C     DEFB _O, _R, _I, _G, _I, _N, _A, _L, $00, _V, _E, _R, _DT, $00, _B, _Y, $00, _G, _R, _E, _G, $00, _Y, _O, _B, _CM, _1, _9, _7, _2, $FF
1525   4862 2E 33 26 31 
1525   4866 00 3B 2A 37 
1525   486A 1B 00 27 3E 
1525   486E 00 2C 37 2A 
1525   4872 2C 00 3E 34 
1525   4876 27 1A 1D 25 
1525   487A 23 1E FF 
1526   487D             welcome3:
1527   487D 3F 3D 24 1D     DEFB _Z, _X, _8, _1, $00, _V, _E, _R, _DT, $00, _B, _Y, $00, _E, _V, _A, _N, $00, _C, $1B, $00, _W, _R, _I, _G, _H, _T, _CM, _2, _0, _1, _5, $FF
1527   4881 00 3B 2A 37 
1527   4885 1B 00 27 3E 
1527   4889 00 2A 3B 26 
1527   488D 33 00 28 1B 
1527   4891 00 3C 37 2E 
1527   4895 2C 2D 39 1A 
1527   4899 1E 1C 1D 21 
1527   489D FF 
1528   489E             msprompt:
1529   489E 32 34 3B 2A     DEFB $32, $34, $3B, $2A, $00, $34, $37, $00, $38, $2D, $34, $34, $39, $0F, $00, $10, $32, $1A, $38, $11, $FF;
1529   48A2 00 34 37 00 
1529   48A6 38 2D 34 34 
1529   48AA 39 0F 00 10 
1529   48AE 32 1A 38 11 
1529   48B2 FF 
1530   48B3             roomprompt:
1531   48B3 3C 2D 2E 28     DEFB $3C, $2D, $2E, $28, $2D, $00, $37, $34, $34, $32, $0F, $00, $00, $00, $00, $FF;
1531   48B7 2D 00 37 34 
1531   48BB 34 32 0F 00 
1531   48BF 00 00 00 FF 
1532   48C3             youcantgothatway:
1533   48C3 3E 34 3A 00     DEFB _Y, _O, _U, $00, _C, _A, _N, $02, _T, $00, _G, _O, $00, _T, _H, _A, _T, $00, _W, _A, _Y, _DT, $FF
1533   48C7 28 26 33 02 
1533   48CB 39 00 2C 34 
1533   48CF 00 39 2D 26 
1533   48D3 39 00 3C 26 
1533   48D7 3E 1B FF 
1534   48DA             playagainprompt:
1535   48DA 35 31 26 3E     DEFB _P, _L, _A, _Y, $00, _A, _G, _A, _I, _N, _QM, _OP, _Y, _CM, _N, _CP, $FF
1535   48DE 00 26 2C 26 
1535   48E2 2E 33 0F 10 
1535   48E6 3E 1A 33 11 
1535   48EA FF 
1536   48EB             currentrooomtext:
1537   48EB 3E 34 3A 00     DEFB $3E, $34, $3A, $00, $26, $37, $2A, $00, $2E, $33, $00, $37, $34, $34, $32, $00, $00, $00, $FF
1537   48EF 26 37 2A 00 
1537   48F3 2E 33 00 37 
1537   48F7 34 34 32 00 
1537   48FB 00 00 FF 
1538   48FE             tunnelstext:
1539   48FE 39 3A 33 33     DEFB $39, $3A, $33, $33, $2A, $31, $38, $00, $39, $34, $00, $00, $00, $1A, $00, $00, $00, $1A, $26, $33, $29, $00, $00, $00, $FF 
1539   4902 2A 31 38 00 
1539   4906 39 34 00 00 
1539   490A 00 1A 00 00 
1539   490E 00 1A 26 33 
1539   4912 29 00 00 00 
1539   4916 FF 
1540   4917             batswarning:
1541   4917             ;    DEFB $39, $3A, $33, $33, $2A, $31, $38, $00, $39, $34, $00, $00, $00, $1A, $00, $00, $00, $1A, $26, $33, $29, $00, $00, $00, $FF 
1542   4917 38 36 3A 2A     DEFB $38, $36, $3A, $2A, $26, $30, $16, $27, $26, $39, $38, $00, $33, $2A, $26, $37, $27, $3E, $00, $02, $06, $00, $02, $06, $FF
1542   491B 26 30 16 27 
1542   491F 26 39 38 00 
1542   4923 33 2A 26 37 
1542   4927 27 3E 00 02 
1542   492B 06 00 02 06 
1542   492F FF 
1543   4930             pitwarning:
1544   4930             ;    DEFB $39, $3A, $33, $33, $2A, $31, $38, $00, $39, $34, $00, $00, $00, $1A, $00, $00, $00, $1A, $26, $33, $29, $00, $00, $00, $FF 
1545   4930 11 11 11 29     DEFB $11, $11, $11, $29, $37, $26, $2B, $39, $11, $11, $11, $FF
1545   4934 37 26 2B 39 
1545   4938 11 11 11 FF 
1546   493C             wumpuswarning:
1547   493C 17 17 17 2E     DEFB _AS,_AS,_AS,_I, $00, $38, $32, $2A, $31, $31, $00, $26, $00, $3C, $3A, $32, $35, $3A, $38, _AS,_AS,_AS,$FF
1547   4940 00 38 32 2A 
1547   4944 31 31 00 26 
1547   4948 00 3C 3A 32 
1547   494C 35 3A 38 17 
1547   4950 17 17 FF 
1548   4953             pitdeathmessage:
1549   4953 17 17 17 3E     DEFB _AS, _AS, _AS, _Y, _O, _U, $02, _V, _E, $00, _F, _A, _L, _L, _E, _N, $00, _I, _N, _T, _O, $00, _A, $00, _P, _I, _T, _AS, _AS, _AS, $FF
1549   4957 34 3A 02 3B 
1549   495B 2A 00 2B 26 
1549   495F 31 31 2A 33 
1549   4963 00 2E 33 39 
1549   4967 34 00 26 00 
1549   496B 35 2E 39 17 
1549   496F 17 17 FF 
1550   4972             bats_fly_message:
1551   4972 27 26 39 38     DEFB _B, _A, _T, _S, $00, _H, _A, _V, _E, $00, _F, _L, _O, _W, _N, $00, _Y, _O, _U , $00, _T, _O, $00, _R, _O, _O, _M, $00, $00, $00, $FF    
1551   4976 00 2D 26 3B 
1551   497A 2A 00 2B 31 
1551   497E 34 3C 33 00 
1551   4982 3E 34 3A 00 
1551   4986 39 34 00 37 
1551   498A 34 34 32 00 
1551   498E 00 00 FF 
1552   4991             playereatenmessage:
1553   4991 17 3E 34 3A     DEFB _AS, _Y, _O, _U, $00, $_H, _A, _V, _E, $00, _B, _E, _C, _O, _M, _E, $00, _W, _U, _M, _P, _U, _S, $00, _F, _O, _O, _D, _AS, $FF
1553   4995 00 2D 26 3B 
1553   4999 2A 00 27 2A 
1553   499D 28 34 32 2A 
1553   49A1 00 3C 3A 32 
1553   49A5 35 3A 38 00 
1553   49A9 2B 34 34 29 
1553   49AD 17 FF 
1554   49AF             shootarrowmessage:
1555   49AF 26 00 37 34     DEFB _A, $00, _R, _O, _A, _R, $00, _F, _I, _L, _L, _L, _S, $00, _T, _H, _E, $00, _C, _A, _V, _E, _R, _N, _S, _DT, _DT, _DT, $FF
1555   49B3 26 37 00 2B 
1555   49B7 2E 31 31 31 
1555   49BB 38 00 39 2D 
1555   49BF 2A 00 28 26 
1555   49C3 3B 2A 37 33 
1555   49C7 38 1B 1B 1B 
1555   49CB FF 
1556   49CC             victorymessage:
1557   49CC 17 17 17 3E     DEFB _AS, _AS, _AS, _Y, _O, _U, $02, _V, _E, $00, _K, _I, _L, _L, _E, _D, $00, _T, _H, _E, $00, _W, _U, _M, _P, _U, _S, _AS, _AS , _AS, $FF
1557   49D0 34 3A 02 3B 
1557   49D4 2A 00 30 2E 
1557   49D8 31 31 2A 29 
1557   49DC 00 39 2D 2A 
1557   49E0 00 3C 3A 32 
1557   49E4 35 3A 38 17 
1557   49E8 17 17 FF 
1558   49EB             pitwalls:
1559   49EB 80 80 80 80     DEFB $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80
1559   49EF 80 80 80 80 
1559   49F3 80 80 80 80 
1559   49F7 80 
1560   49F8             blanks:
1561   49F8 00 00 00 00     DEFB $00, $00, $00, $00, $00, $00
1561   49FC 00 00 
1562   49FE 80 80 80 80     DEFB $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $80, $FF
1562   4A02 80 80 80 80 
1562   4A06 80 80 80 80 
1562   4A0A 80 FF 
1563   4A0C             arrow:
1564   4A0C 14 16 12        DEFB _EQ, _MI, _GT
1565   4A0F             fallingplayer:
1566   4A0F 1C 15 13        DEFB $1C, $15, $13
1567   4A12             clearfallingplayer:
1568   4A12 00 00 00        DEFB $00, $00, $00 
1569   4A15             bat_wings_up
1570   4A15 02 06           DEFB $02, $6
1571   4A17             bat_wings_down
1572   4A17 87 83           DEFB $87, $83
1573   4A19             
1574   4A19             ;2byte label, three bytes for the number of the connecting rooms, one byte for flags
1575   4A19             ;bits from left to right
1576   4A19             ; |0|0|next to pit|has pit|next to bats|has bats|next to wumpus|has wumpus|
1577   4A19             room1:
1578   4A19 00 1D 02 05     DEFB $00, $1D, $02, $05, $06, $00
1578   4A1D 06 00 
1579   4A1F             room2:
1580   4A1F 00 1E 01 03     DEFB $00, $1E, $01, $03, $08, $00 
1580   4A23 08 00 
1581   4A25             room3:
1582   4A25 00 1F 02 04     DEFB $00, $1F, $02, $04, $0A, $00
1582   4A29 0A 00 
1583   4A2B             room4:
1584   4A2B 00 20 03 05     DEFB $00, $20, $03, $05, $0B, $00
1584   4A2F 0B 00 
1585   4A31             room5:
1586   4A31 00 21 01 04     DEFB $00, $21, $01, $04, $0E, $00 
1586   4A35 0E 00 
1587   4A37             room6:
1588   4A37 00 22 01 07     DEFB $00, $22, $01, $07, $0F, $00
1588   4A3B 0F 00 
1589   4A3D             room7:
1590   4A3D 00 23 06 08     DEFB $00, $23, $06, $08, $11, $00 
1590   4A41 11 00 
1591   4A43             room8:
1592   4A43 00 24 02 07     DEFB $00, $24, $02, $07, $09, $00
1592   4A47 09 00 
1593   4A49             room9:
1594   4A49 00 25 08 0A     DEFB $00, $25, $08, $0A, $12, $00 
1594   4A4D 12 00 
1595   4A4F             room10:
1596   4A4F 1D 1C 03 09     DEFB $1D, $1C, $03, $09, $0B, $00 
1596   4A53 0B 00 
1597   4A55             room11:
1598   4A55 1D 1D 0A 0C     DEFB $1D, $1D, $0A, $0C, $13, $00 
1598   4A59 13 00 
1599   4A5B             room12:
1600   4A5B 1D 1E 04 0B     DEFB $1D, $1E, $04, $0B, $0D, $00 
1600   4A5F 0D 00 
1601   4A61             room13:
1602   4A61 1D 1F 0C 0E     DEFB $1D, $1F, $0C, $0E, $14, $00
1602   4A65 14 00 
1603   4A67             room14:
1604   4A67 1D 20 05 0D     DEFB $1D, $20, $05, $0D, $0F, $00
1604   4A6B 0F 00 
1605   4A6D             room15:
1606   4A6D 1D 21 06 0E     DEFB $1D, $21, $06, $0E, $10, $00
1606   4A71 10 00 
1607   4A73             room16:
1608   4A73 1D 22 0F 11     DEFB $1D, $22, $0F, $11, $14, $00
1608   4A77 14 00 
1609   4A79             room17:
1610   4A79 1D 23 07 10     DEFB $1D, $23, $07, $10, $12, $00
1610   4A7D 12 00 
1611   4A7F             room18:
1612   4A7F 1D 24 09 11     DEFB $1D, $24, $09, $11, $13, $00 
1612   4A83 13 00 
1613   4A85             room19:
1614   4A85 1D 25 0B 12     DEFB $1D, $25, $0B, $12, $14, $00 
1614   4A89 14 00 
1615   4A8B             room20:
1616   4A8B 1E 1C 0D 10     DEFB $1E, $1C, $0D, $10, $13, $00 
1616   4A8F 13 00 
1617   4A91                 
1618   4A91             ;delaycounter:
1619   4A91             ;    DEFB $80; 128d
1620   4A91                 
1621   4A91                 
1622   4A91             ; ===========================================================
1623   4A91             ; code ends
1624   4A91             ; ===========================================================
1625   4A91             ;end the REM line and put in the RAND USR line to call our 'hex code'
1626   4A91             #include "line2.asm"
0001+  4A91             ;this is the end of line 1 - the REM			
0002+  4A91 76          				DEFB $76                        ; Newline				
0003+  4A92             ;followed by the the RAND USR line				
0004+  4A92             Line1End       
0005+  4A92 00 0A       Line2			DEFB $00,$0a
0006+  4A94 0E 00                       DEFW Line2End-Line2Text
0007+  4A96 F9 D4       Line2Text     	DEFB $F9,$D4                    ; RAND USR
0008+  4A98 1D 22 21 1D 				DEFB $1D,$22,$21,$1D,$20        ; 16514                
0008+  4A9C 20 
0009+  4A9D 7E                          DEFB $7E                        ; Number
0010+  4A9E 8F 01 04 00                 DEFB $8F,$01,$04,$00,$00        ; Numeric encoding
0010+  4AA2 00 
0011+  4AA3 76                          DEFB $76                        ; Newline
0012+  4AA4             Line2End 
1627   4AA4             
1628   4AA4             ;display file defintion
1629   4AA4             #include "screen.asm"               
0001+  4AA4             ;ZX81 screens
0002+  4AA4             ; Display file (ZX81 screen) - low res screen
0003+  4AA4 76          Display        	DEFB $76     
0004+  4AA5 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 0
0004+  4AA9 00 00 00 00 
0004+  4AAD 00 00 00 00 
0004+  4AB1 00 00 00 00 
0004+  4AB5 00 00 00 00 
0004+  4AB9 00 00 00 00 
0004+  4ABD 00 00 00 00 
0004+  4AC1 00 00 00 00 
0004+  4AC5 76 
0005+  4AC6 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 1
0005+  4ACA 00 00 00 00 
0005+  4ACE 00 00 00 00 
0005+  4AD2 00 00 00 00 
0005+  4AD6 00 00 00 00 
0005+  4ADA 00 00 00 00 
0005+  4ADE 00 00 00 00 
0005+  4AE2 00 00 00 00 
0005+  4AE6 76 
0006+  4AE7 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 2
0006+  4AEB 00 00 00 00 
0006+  4AEF 00 00 00 00 
0006+  4AF3 00 00 00 00 
0006+  4AF7 00 00 00 00 
0006+  4AFB 00 00 00 00 
0006+  4AFF 00 00 00 00 
0006+  4B03 00 00 00 00 
0006+  4B07 76 
0007+  4B08 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 3
0007+  4B0C 00 00 00 00 
0007+  4B10 00 00 00 00 
0007+  4B14 00 00 00 00 
0007+  4B18 00 00 00 00 
0007+  4B1C 00 00 00 00 
0007+  4B20 00 00 00 00 
0007+  4B24 00 00 00 00 
0007+  4B28 76 
0008+  4B29 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 4
0008+  4B2D 00 00 00 00 
0008+  4B31 00 00 00 00 
0008+  4B35 00 00 00 00 
0008+  4B39 00 00 00 00 
0008+  4B3D 00 00 00 00 
0008+  4B41 00 00 00 00 
0008+  4B45 00 00 00 00 
0008+  4B49 76 
0009+  4B4A 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 5
0009+  4B4E 00 00 00 00 
0009+  4B52 00 00 00 00 
0009+  4B56 00 00 00 00 
0009+  4B5A 00 00 00 00 
0009+  4B5E 00 00 00 00 
0009+  4B62 00 00 00 00 
0009+  4B66 00 00 00 00 
0009+  4B6A 76 
0010+  4B6B 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 6
0010+  4B6F 00 00 00 00 
0010+  4B73 00 00 00 00 
0010+  4B77 00 00 00 00 
0010+  4B7B 00 00 00 00 
0010+  4B7F 00 00 00 00 
0010+  4B83 00 00 00 00 
0010+  4B87 00 00 00 00 
0010+  4B8B 76 
0011+  4B8C 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 7
0011+  4B90 00 00 00 00 
0011+  4B94 00 00 00 00 
0011+  4B98 00 00 00 00 
0011+  4B9C 00 00 00 00 
0011+  4BA0 00 00 00 00 
0011+  4BA4 00 00 00 00 
0011+  4BA8 00 00 00 00 
0011+  4BAC 76 
0012+  4BAD 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 8
0012+  4BB1 00 00 00 00 
0012+  4BB5 00 00 00 00 
0012+  4BB9 00 00 00 00 
0012+  4BBD 00 00 00 00 
0012+  4BC1 00 00 00 00 
0012+  4BC5 00 00 00 00 
0012+  4BC9 00 00 00 00 
0012+  4BCD 76 
0013+  4BCE 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 9
0013+  4BD2 00 00 00 00 
0013+  4BD6 00 00 00 00 
0013+  4BDA 00 00 00 00 
0013+  4BDE 00 00 00 00 
0013+  4BE2 00 00 00 00 
0013+  4BE6 00 00 00 00 
0013+  4BEA 00 00 00 00 
0013+  4BEE 76 
0014+  4BEF 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 10
0014+  4BF3 00 00 00 00 
0014+  4BF7 00 00 00 00 
0014+  4BFB 00 00 00 00 
0014+  4BFF 00 00 00 00 
0014+  4C03 00 00 00 00 
0014+  4C07 00 00 00 00 
0014+  4C0B 00 00 00 00 
0014+  4C0F 76 
0015+  4C10 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 11
0015+  4C14 00 00 00 00 
0015+  4C18 00 00 00 00 
0015+  4C1C 00 00 00 00 
0015+  4C20 00 00 00 00 
0015+  4C24 00 00 00 00 
0015+  4C28 00 00 00 00 
0015+  4C2C 00 00 00 00 
0015+  4C30 76 
0016+  4C31 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 12
0016+  4C35 00 00 00 00 
0016+  4C39 00 00 00 00 
0016+  4C3D 00 00 00 00 
0016+  4C41 00 00 00 00 
0016+  4C45 00 00 00 00 
0016+  4C49 00 00 00 00 
0016+  4C4D 00 00 00 00 
0016+  4C51 76 
0017+  4C52 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 13
0017+  4C56 00 00 00 00 
0017+  4C5A 00 00 00 00 
0017+  4C5E 00 00 00 00 
0017+  4C62 00 00 00 00 
0017+  4C66 00 00 00 00 
0017+  4C6A 00 00 00 00 
0017+  4C6E 00 00 00 00 
0017+  4C72 76 
0018+  4C73 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 14
0018+  4C77 00 00 00 00 
0018+  4C7B 00 00 00 00 
0018+  4C7F 00 00 00 00 
0018+  4C83 00 00 00 00 
0018+  4C87 00 00 00 00 
0018+  4C8B 00 00 00 00 
0018+  4C8F 00 00 00 00 
0018+  4C93 76 
0019+  4C94 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 15
0019+  4C98 00 00 00 00 
0019+  4C9C 00 00 00 00 
0019+  4CA0 00 00 00 00 
0019+  4CA4 00 00 00 00 
0019+  4CA8 00 00 00 00 
0019+  4CAC 00 00 00 00 
0019+  4CB0 00 00 00 00 
0019+  4CB4 76 
0020+  4CB5 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 16
0020+  4CB9 00 00 00 00 
0020+  4CBD 00 00 00 00 
0020+  4CC1 00 00 00 00 
0020+  4CC5 00 00 00 00 
0020+  4CC9 00 00 00 00 
0020+  4CCD 00 00 00 00 
0020+  4CD1 00 00 00 00 
0020+  4CD5 76 
0021+  4CD6 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 17
0021+  4CDA 00 00 00 00 
0021+  4CDE 00 00 00 00 
0021+  4CE2 00 00 00 00 
0021+  4CE6 00 00 00 00 
0021+  4CEA 00 00 00 00 
0021+  4CEE 00 00 00 00 
0021+  4CF2 00 00 00 00 
0021+  4CF6 76 
0022+  4CF7 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 18
0022+  4CFB 00 00 00 00 
0022+  4CFF 00 00 00 00 
0022+  4D03 00 00 00 00 
0022+  4D07 00 00 00 00 
0022+  4D0B 00 00 00 00 
0022+  4D0F 00 00 00 00 
0022+  4D13 00 00 00 00 
0022+  4D17 76 
0023+  4D18 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 19
0023+  4D1C 00 00 00 00 
0023+  4D20 00 00 00 00 
0023+  4D24 00 00 00 00 
0023+  4D28 00 00 00 00 
0023+  4D2C 00 00 00 00 
0023+  4D30 00 00 00 00 
0023+  4D34 00 00 00 00 
0023+  4D38 76 
0024+  4D39 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 20
0024+  4D3D 00 00 00 00 
0024+  4D41 00 00 00 00 
0024+  4D45 00 00 00 00 
0024+  4D49 00 00 00 00 
0024+  4D4D 00 00 00 00 
0024+  4D51 00 00 00 00 
0024+  4D55 00 00 00 00 
0024+  4D59 76 
0025+  4D5A 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 21
0025+  4D5E 00 00 00 00 
0025+  4D62 00 00 00 00 
0025+  4D66 00 00 00 00 
0025+  4D6A 00 00 00 00 
0025+  4D6E 00 00 00 00 
0025+  4D72 00 00 00 00 
0025+  4D76 00 00 00 00 
0025+  4D7A 76 
0026+  4D7B 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 22
0026+  4D7F 00 00 00 00 
0026+  4D83 00 00 00 00 
0026+  4D87 00 00 00 00 
0026+  4D8B 00 00 00 00 
0026+  4D8F 00 00 00 00 
0026+  4D93 00 00 00 00 
0026+  4D97 00 00 00 00 
0026+  4D9B 76 
0027+  4D9C 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 23
0027+  4DA0 00 00 00 00 
0027+  4DA4 00 00 00 00 
0027+  4DA8 00 00 00 00 
0027+  4DAC 00 00 00 00 
0027+  4DB0 00 00 00 00 
0027+  4DB4 00 00 00 00 
0027+  4DB8 00 00 00 00 
0027+  4DBC 76 
0028+  4DBD             
1630   4DBD             
1631   4DBD             ;close out the basic program
1632   4DBD             #include "endbasic.asm"0001+  4DBD             ; close out the BASIC program structure
0002+  4DBD             ; BASIC Variables area
0003+  4DBD             Variables:      
0004+  4DBD 80          VariablesEnd:   DEFB $80
0005+  4DBE             BasicEnd:                              
0006+  4DBE             
0007+  4DBE             
0008+  4DBE             #END
tasm: Number of errors = 0
