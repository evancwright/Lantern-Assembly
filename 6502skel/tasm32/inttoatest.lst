0001   0000             ;
0002   0000             ; To assembly this, either use the zxasm.bat file:
0003   0000             ;
0004   0000             ; zxasm hello
0005   0000             ;
0006   0000             ; or... assemble with the following options:
0007   0000             ;
0008   0000             ; tasm -80 -b -s hello.asm hello.p
0009   0000             ;
0010   0000             ;==============================================
0011   0000             ;    ZX81 assembler 'Hello World' 
0012   0000             ;==============================================
0013   0000             ;
0014   0000             ;defs
0015   0000             #include "zx81defs.asm"
0001+  0000             ;defines to make us feel more at home
0002+  0000             #define         DEFB .BYTE
0003+  0000             #define         DEFW .WORD
0004+  0000             #define         DEFM .TEXT
0005+  0000             #define         ORG  .ORG
0006+  0000             #define         EQU  .EQU
0016   0000             ;EQUs for ROM routines
0017   0000             #include "zx81rom.asm"
0001+  0000             ;ZX81 ROM routines
0002+  0000             PRINT			EQU $10
0003+  0000             PRINTAT			EQU $08F5
0004+  0000             DISPROUT		EQU $0281
0005+  0000             DISPLAY_3		EQU $0292 ;restore registers after a 'slow' display
0006+  0000             DISPLAY_5		EQU $02B5
0007+  0000             PLOT			EQU $0BB2 	; note ROM plot is 0baf - however first thing it does try to pull BC from the calculator stack
0008+  0000             							; so we'll skip past that and set BC ourselves
0009+  0000             CLS				EQU $0A2A
0010+  0000             KSCAN           EQU $02BB 
0011+  0000             FINDCHR         EQU $07BD
0012+  0000             COPY            EQU $0869
0013+  0000             FAST            EQU $0F23
0014+  0000             SLOW            EQU $0F2B
0015+  0000             SLOWORFAST		EQU $0207
0016+  0000             ;sys vars
0017+  0000             ERR_NR			EQU $40000018   0000             ;ZX81 char codes/how to survive without ASCII
0019   0000             #include "charcodes.asm"
0001+  0000             ; ZX81 Characters.
0002+  0000             __:				EQU	$00	;spacja
0003+  0000             _QT:			EQU	$0B	;"
0004+  0000             _PD:			EQU	$0C	;funt
0005+  0000             _SD:			EQU	$0D	;$
0006+  0000             _CL:			EQU	$0E	;:
0007+  0000             _QM:			EQU	$0F	;?
0008+  0000             _OP:			EQU	$10	;(
0009+  0000             _CP:			EQU	$11	;)
0010+  0000             _GT:			EQU	$12	;>
0011+  0000             _LT:			EQU	$13	;<
0012+  0000             _EQ:			EQU	$14	;=
0013+  0000             _PL:			EQU	$15	;+
0014+  0000             _MI:			EQU	$16	;-
0015+  0000             _AS:			EQU	$17	;*
0016+  0000             _SL:			EQU	$18	;/
0017+  0000             _SC:			EQU	$19	;;
0018+  0000             _CM:			EQU	$1A	;,
0019+  0000             _DT:			EQU	$1B	;.
0020+  0000             _NL:			EQU	$76	;NEWLINE
0021+  0000             
0022+  0000             _0				EQU $1C
0023+  0000             _1				EQU $1D
0024+  0000             _2				EQU $1E
0025+  0000             _3				EQU $1F
0026+  0000             _4				EQU $20
0027+  0000             _5				EQU $21
0028+  0000             _6				EQU $22
0029+  0000             _7				EQU $23
0030+  0000             _8				EQU $24
0031+  0000             _9				EQU $25
0032+  0000             _A				EQU $26
0033+  0000             _B				EQU $27
0034+  0000             _C				EQU $28
0035+  0000             _D				EQU $29
0036+  0000             _E				EQU $2A
0037+  0000             _F				EQU $2B
0038+  0000             _G				EQU $2C
0039+  0000             _H				EQU $2D
0040+  0000             _I				EQU $2E
0041+  0000             _J				EQU $2F
0042+  0000             _K				EQU $30
0043+  0000             _L				EQU $31
0044+  0000             _M				EQU $32
0045+  0000             _N				EQU $33
0046+  0000             _O				EQU $34
0047+  0000             _P				EQU $35
0048+  0000             _Q				EQU $36
0049+  0000             _R				EQU $37
0050+  0000             _S				EQU $38
0051+  0000             _T				EQU $39
0052+  0000             _U				EQU $3A
0053+  0000             _V				EQU $3B
0054+  0000             _W				EQU $3C
0055+  0000             _X				EQU $3D
0056+  0000             _Y				EQU $3E
0057+  0000             _Z				EQU $3F
0020   0000             ;system variables
0021   0000             #include "zx81sys.asm"
0001+  0000             ;system variables
0002+  0000             ;Origin of a ZX81 file is always 16393
0003+  0000             
0004+  4009                             ORG 16393
0005+  4009                             
0006+  4009             ; System variables live here
0007+  4009 00          VERSN:          DEFB 0
0008+  400A 02 00       E_PPC:          DEFW 2
0009+  400C E8 40       D_FILE:         DEFW Display
0010+  400E E9 40       DF_CC:          DEFW Display+1                  ; First character of display
0011+  4010 01 44       VARS:           DEFW Variables
0012+  4012 00 00       DEST:           DEFW 0
0013+  4014 02 44       E_LINE:         DEFW BasicEnd 
0014+  4016 06 44       CH_ADD:         DEFW BasicEnd+4                 ; Simulate SAVE "X"
0015+  4018 00 00       X_PTR:          DEFW 0
0016+  401A 07 44       STKBOT:         DEFW BasicEnd+5
0017+  401C 07 44       STKEND:         DEFW BasicEnd+5                 ; Empty stack
0018+  401E 00          BREG:           DEFB 0
0019+  401F 5D 40       MEM:            DEFW MEMBOT
0020+  4021 00          UNUSED1:        DEFB 0
0021+  4022 02          DF_SZ:          DEFB 2
0022+  4023 02 00       S_TOP:          DEFW $0002                      ; Top program line number
0023+  4025 BF FD       LAST_K:         DEFW $fdbf
0024+  4027 0F          DEBOUN:         DEFB 15
0025+  4028 37          MARGIN:         DEFB 55
0026+  4029 D6 40       NXTLIN:         DEFW Line2                      ; Next line address
0027+  402B 00 00       OLDPPC:         DEFW 0
0028+  402D 00          FLAGX:          DEFB 0
0029+  402E 00 00       STRLEN:         DEFW 0
0030+  4030 8D 0C       T_ADDR:         DEFW $0c8d
0031+  4032 00 00       SEED:           DEFW 0
0032+  4034 A3 F5       FRAMES:         DEFW $f5a3
0033+  4036 00 00       COORDS:         DEFW 0
0034+  4038 BC          PR_CC:          DEFB $bc
0035+  4039 21 18       S_POSN:         DEFW $1821
0036+  403B 40          CDFLAG:         DEFB $40
0037+  403C 00 00 00 00 PRBUFF:         DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,$76 ; 32 Spaces + Newline
0037+  4040 00 00 00 00 
0037+  4044 00 00 00 00 
0037+  4048 00 00 00 00 
0037+  404C 00 00 00 00 
0037+  4050 00 00 00 00 
0037+  4054 00 00 00 00 
0037+  4058 00 00 00 00 
0037+  405C 76 
0038+  405D 00 00 00 00 MEMBOT:         DEFB 0,0,0,0,0,0,0,0,0,0,$84,$20,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ; 30 zeros
0038+  4061 00 00 00 00 
0038+  4065 00 00 84 20 
0038+  4069 00 00 00 00 
0038+  406D 00 00 00 00 
0038+  4071 00 00 00 00 
0038+  4075 00 00 00 00 
0038+  4079 00 00 
0039+  407B 00 00       UNUNSED2:       DEFW 0
0040+  407D             
0041+  407D             ; End of system variables
0042+  407D             
0022   407D             
0023   407D             ;the standard REM statement that will contain our 'hex' code
0024   407D             #include "line1.asm"
0001+  407D             ;Line 1
0002+  407D             ;this is the REM statement...
0003+  407D 00 00       Line1:          DEFB $00,$00                    ; Line 1
0004+  407F 55 00                       DEFW Line1End-Line1Text         ; Line 1 length
0005+  4081 EA          Line1Text:      DEFB $ea                        ; REM             
0006+  4082             
0025   4082             
0026   4082             ;------------------------------------------------------------
0027   4082             ; code starts here and gets added to the end of the REM 
0028   4082             ;------------------------------------------------------------
0029   4082             
0030   4082             ;back to BASIC	
0031   4082             ;converts text in a buffer to an integer
0032   4082             ;this function takes the address of the rightmost
0033   4082             ;hl address of rightmost byte
0034   4082             ;c number of bytes in the buffer
0035   4082             ;result is returned in bc
0036   4082             start:
0037   4082 21 D2 40        ld hl, buffer
0038   4085 11 02 00        ld de, 2
0039   4088 19              add hl, de
0040   4089 0E 04           ld c, 4
0041   408B CD 92 40        call atoi
0042   408E C1              pop bc
0043   408F C3 82 40        jp start
0044   4092             ;converts text in a buffer to an integer
0045   4092             ;this function takes the address of the rightmost
0046   4092             ;hl address of rightmost byte
0047   4092             ;de
0048   4092             ;c number of bytes in the buffer
0049   4092             ;result is returned in bc
0050   4092             atoi:
0051   4092                 ;bc will be the counter
0052   4092                 ;hl will contain the src address
0053   4092 01 00 00        ld bc, 0
0054   4095             
0055   4095             atoiloop:
0056   4095 56              ld d, (hl)  ; get a char
0057   4096 1E 1C           ld e, $1C   ; subtract off $1C to convert it to a number
0058   4098 7A              ld a, d     ; load char into accumulator
0059   4099 93              sub e   ;subract $1C from char
0060   409A FA B5 40        jp m, invalid  ; char was less than "0"
0061   409D                 
0062   409D                 ; char is still loaded into d
0063   409D                 ; load char code for "9"
0064   409D                 ; subtract that from the char
0065   409D 57              ld d, a;  
0066   409E 3E 09           ld a, $09 ; char code for 9
0067   40A0 92              sub d;
0068   40A1 FA B5 40        jp m, invalid; char was greater than "9"
0069   40A4                 
0070   40A4                 ;char (in d) is valid
0071   40A4 5A              ld e, d
0072   40A5 16 00           ld d, 0
0073   40A7                 
0074   40A7                 ;multiply de * the place value
0075   40A7 E5              push hl; src addr
0076   40A8 3E 0A           ld a, 10
0077   40AA CD C1 40        call Mul8 ; HL=DE*A
0078   40AD                 
0079   40AD 54              ld d ,h
0080   40AE 5D              ld e ,l
0081   40AF                 
0082   40AF                 ;add to the sum
0083   40AF                 add bc, hl
inttoatest.asm line 0083: unrecognized argument.             (bc,hl)
0084   40AF E1              pop hl
0085   40B0                 
0086   40B0 2B              dec hl
0087   40B1 0D              dec c
0088   40B2 C2 95 40        jp nz, atoiloop;
0089   40B5                 
0090   40B5             invalid:
0091   40B5 D1              pop de
0092   40B6 01 00 00        ld bc, 0
0093   40B9 C5              push bc
0094   40BA C9              ret
0095   40BB             valid:
0096   40BB             
0097   40BB                 ;pad remaining chars with space
0098   40BB             ;    ld a, c
0099   40BB             ;    cp 0
0100   40BB             ;    jp z, nospaces
0101   40BB             ;spaces:
0102   40BB             ;    ld a, $00
0103   40BB             ;    ld (hl), $00; space
0104   40BB             ;    dec c
0105   40BB             ;    dec hl
0106   40BB             ;    jp nz, spaces
0107   40BB             ;nospaces:
0108   40BB 01 01 00        ld bc, 1
0109   40BE C5              push bc
0110   40BF C9              ret
0111   40C0             
0112   40C0             
0113   40C0 C9              ret
0114   40C1             
0115   40C1             Mul8:                            ; this routine performs the operation HL=DE*A
0116   40C1 21 00 00      ld hl,0                        ; HL is used to accumulate the result
0117   40C4 06 08         ld b,8                         ; the multiplier (A) is 8 bits wide
0118   40C6             Mul8Loop:
0119   40C6 0F            rrca                           ; putting the next bit into the carry
0120   40C7 D2 CB 40      jp nc,Mul8Skip                 ; if zero, we skip the addition (jp is used for speed)
0121   40CA 19            add hl,de                      ; adding to the product if necessary
0122   40CB             Mul8Skip:
0123   40CB CB 23         sla e                          ; calculating the next auxiliary product by shifting
0124   40CD CB 12         rl d                           ; DE one bit leftwards (refer to the shift instructions!)
0125   40CF 10 F5         djnz Mul8Loop
0126   40D1 C9            ret
0127   40D2             
0128   40D2              ;include our variables
0129   40D2             ;#include "vars.asm"
0130   40D2             buffer:
0131   40D2 1D 26 26        DEFB $1D,$26,$26 ; "103"
0132   40D5             
0133   40D5             ; ===========================================================
0134   40D5             ; code ends
0135   40D5             ; ===========================================================
0136   40D5             ;end the REM line and put in the RAND USR line to call our 'hex code'
0137   40D5             #include "line2.asm"
0001+  40D5             ;this is the end of line 1 - the REM			
0002+  40D5 76          				DEFB $76                        ; Newline				
0003+  40D6             ;followed by the the RAND USR line				
0004+  40D6             Line1End       
0005+  40D6 00 0A       Line2			DEFB $00,$0a
0006+  40D8 0E 00                       DEFW Line2End-Line2Text
0007+  40DA F9 D4       Line2Text     	DEFB $F9,$D4                    ; RAND USR
0008+  40DC 1D 22 21 1D 				DEFB $1D,$22,$21,$1D,$20        ; 16514                
0008+  40E0 20 
0009+  40E1 7E                          DEFB $7E                        ; Number
0010+  40E2 8F 01 04 00                 DEFB $8F,$01,$04,$00,$00        ; Numeric encoding
0010+  40E6 00 
0011+  40E7 76                          DEFB $76                        ; Newline
0012+  40E8             Line2End 
0138   40E8             
0139   40E8             ;display file defintion
0140   40E8             #include "screen.asm"               
0001+  40E8             ;ZX81 screens
0002+  40E8             ; Display file (ZX81 screen) - low res screen
0003+  40E8 76          Display        	DEFB $76     
0004+  40E9 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 0
0004+  40ED 00 00 00 00 
0004+  40F1 00 00 00 00 
0004+  40F5 00 00 00 00 
0004+  40F9 00 00 00 00 
0004+  40FD 00 00 00 00 
0004+  4101 00 00 00 00 
0004+  4105 00 00 00 00 
0004+  4109 76 
0005+  410A 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 1
0005+  410E 00 00 00 00 
0005+  4112 00 00 00 00 
0005+  4116 00 00 00 00 
0005+  411A 00 00 00 00 
0005+  411E 00 00 00 00 
0005+  4122 00 00 00 00 
0005+  4126 00 00 00 00 
0005+  412A 76 
0006+  412B 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 2
0006+  412F 00 00 00 00 
0006+  4133 00 00 00 00 
0006+  4137 00 00 00 00 
0006+  413B 00 00 00 00 
0006+  413F 00 00 00 00 
0006+  4143 00 00 00 00 
0006+  4147 00 00 00 00 
0006+  414B 76 
0007+  414C 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 3
0007+  4150 00 00 00 00 
0007+  4154 00 00 00 00 
0007+  4158 00 00 00 00 
0007+  415C 00 00 00 00 
0007+  4160 00 00 00 00 
0007+  4164 00 00 00 00 
0007+  4168 00 00 00 00 
0007+  416C 76 
0008+  416D 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 4
0008+  4171 00 00 00 00 
0008+  4175 00 00 00 00 
0008+  4179 00 00 00 00 
0008+  417D 00 00 00 00 
0008+  4181 00 00 00 00 
0008+  4185 00 00 00 00 
0008+  4189 00 00 00 00 
0008+  418D 76 
0009+  418E 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 5
0009+  4192 00 00 00 00 
0009+  4196 00 00 00 00 
0009+  419A 00 00 00 00 
0009+  419E 00 00 00 00 
0009+  41A2 00 00 00 00 
0009+  41A6 00 00 00 00 
0009+  41AA 00 00 00 00 
0009+  41AE 76 
0010+  41AF 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 6
0010+  41B3 00 00 00 00 
0010+  41B7 00 00 00 00 
0010+  41BB 00 00 00 00 
0010+  41BF 00 00 00 00 
0010+  41C3 00 00 00 00 
0010+  41C7 00 00 00 00 
0010+  41CB 00 00 00 00 
0010+  41CF 76 
0011+  41D0 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 7
0011+  41D4 00 00 00 00 
0011+  41D8 00 00 00 00 
0011+  41DC 00 00 00 00 
0011+  41E0 00 00 00 00 
0011+  41E4 00 00 00 00 
0011+  41E8 00 00 00 00 
0011+  41EC 00 00 00 00 
0011+  41F0 76 
0012+  41F1 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 8
0012+  41F5 00 00 00 00 
0012+  41F9 00 00 00 00 
0012+  41FD 00 00 00 00 
0012+  4201 00 00 00 00 
0012+  4205 00 00 00 00 
0012+  4209 00 00 00 00 
0012+  420D 00 00 00 00 
0012+  4211 76 
0013+  4212 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 9
0013+  4216 00 00 00 00 
0013+  421A 00 00 00 00 
0013+  421E 00 00 00 00 
0013+  4222 00 00 00 00 
0013+  4226 00 00 00 00 
0013+  422A 00 00 00 00 
0013+  422E 00 00 00 00 
0013+  4232 76 
0014+  4233 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 10
0014+  4237 00 00 00 00 
0014+  423B 00 00 00 00 
0014+  423F 00 00 00 00 
0014+  4243 00 00 00 00 
0014+  4247 00 00 00 00 
0014+  424B 00 00 00 00 
0014+  424F 00 00 00 00 
0014+  4253 76 
0015+  4254 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 11
0015+  4258 00 00 00 00 
0015+  425C 00 00 00 00 
0015+  4260 00 00 00 00 
0015+  4264 00 00 00 00 
0015+  4268 00 00 00 00 
0015+  426C 00 00 00 00 
0015+  4270 00 00 00 00 
0015+  4274 76 
0016+  4275 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 12
0016+  4279 00 00 00 00 
0016+  427D 00 00 00 00 
0016+  4281 00 00 00 00 
0016+  4285 00 00 00 00 
0016+  4289 00 00 00 00 
0016+  428D 00 00 00 00 
0016+  4291 00 00 00 00 
0016+  4295 76 
0017+  4296 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 13
0017+  429A 00 00 00 00 
0017+  429E 00 00 00 00 
0017+  42A2 00 00 00 00 
0017+  42A6 00 00 00 00 
0017+  42AA 00 00 00 00 
0017+  42AE 00 00 00 00 
0017+  42B2 00 00 00 00 
0017+  42B6 76 
0018+  42B7 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 14
0018+  42BB 00 00 00 00 
0018+  42BF 00 00 00 00 
0018+  42C3 00 00 00 00 
0018+  42C7 00 00 00 00 
0018+  42CB 00 00 00 00 
0018+  42CF 00 00 00 00 
0018+  42D3 00 00 00 00 
0018+  42D7 76 
0019+  42D8 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 15
0019+  42DC 00 00 00 00 
0019+  42E0 00 00 00 00 
0019+  42E4 00 00 00 00 
0019+  42E8 00 00 00 00 
0019+  42EC 00 00 00 00 
0019+  42F0 00 00 00 00 
0019+  42F4 00 00 00 00 
0019+  42F8 76 
0020+  42F9 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 16
0020+  42FD 00 00 00 00 
0020+  4301 00 00 00 00 
0020+  4305 00 00 00 00 
0020+  4309 00 00 00 00 
0020+  430D 00 00 00 00 
0020+  4311 00 00 00 00 
0020+  4315 00 00 00 00 
0020+  4319 76 
0021+  431A 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 17
0021+  431E 00 00 00 00 
0021+  4322 00 00 00 00 
0021+  4326 00 00 00 00 
0021+  432A 00 00 00 00 
0021+  432E 00 00 00 00 
0021+  4332 00 00 00 00 
0021+  4336 00 00 00 00 
0021+  433A 76 
0022+  433B 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 18
0022+  433F 00 00 00 00 
0022+  4343 00 00 00 00 
0022+  4347 00 00 00 00 
0022+  434B 00 00 00 00 
0022+  434F 00 00 00 00 
0022+  4353 00 00 00 00 
0022+  4357 00 00 00 00 
0022+  435B 76 
0023+  435C 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 19
0023+  4360 00 00 00 00 
0023+  4364 00 00 00 00 
0023+  4368 00 00 00 00 
0023+  436C 00 00 00 00 
0023+  4370 00 00 00 00 
0023+  4374 00 00 00 00 
0023+  4378 00 00 00 00 
0023+  437C 76 
0024+  437D 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 20
0024+  4381 00 00 00 00 
0024+  4385 00 00 00 00 
0024+  4389 00 00 00 00 
0024+  438D 00 00 00 00 
0024+  4391 00 00 00 00 
0024+  4395 00 00 00 00 
0024+  4399 00 00 00 00 
0024+  439D 76 
0025+  439E 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 21
0025+  43A2 00 00 00 00 
0025+  43A6 00 00 00 00 
0025+  43AA 00 00 00 00 
0025+  43AE 00 00 00 00 
0025+  43B2 00 00 00 00 
0025+  43B6 00 00 00 00 
0025+  43BA 00 00 00 00 
0025+  43BE 76 
0026+  43BF 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 22
0026+  43C3 00 00 00 00 
0026+  43C7 00 00 00 00 
0026+  43CB 00 00 00 00 
0026+  43CF 00 00 00 00 
0026+  43D3 00 00 00 00 
0026+  43D7 00 00 00 00 
0026+  43DB 00 00 00 00 
0026+  43DF 76 
0027+  43E0 00 00 00 00                 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$76 ; Line 23
0027+  43E4 00 00 00 00 
0027+  43E8 00 00 00 00 
0027+  43EC 00 00 00 00 
0027+  43F0 00 00 00 00 
0027+  43F4 00 00 00 00 
0027+  43F8 00 00 00 00 
0027+  43FC 00 00 00 00 
0027+  4400 76 
0028+  4401             
0141   4401             
0142   4401             ;close out the basic program
0143   4401             #include "endbasic.asm"0001+  4401             ; close out the BASIC program structure
0002+  4401             ; BASIC Variables area
0003+  4401             Variables:      
0004+  4401 80          VariablesEnd:   DEFB $80
0005+  4402             BasicEnd:                              
0006+  4402             
0007+  4402             
0008+  4402             #END
tasm: Number of errors = 1
