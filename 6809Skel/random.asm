;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;NEXT_RAND
;THIS SUBROUTINE USES A LINEAR SHIFT
;TO IMPLEMENT RANDOM NUMBER GENERATION
;THE TAPS ARE BITS 0 AND 3
;
;THE SEED (CUR_RAND) SHOULD BE LOADED BEFORE 
;THIS ROUTINE IS CALLED.  JUST DON'T LOAD
;IT WITH ALL ZEROS TO START 0
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;user stack contains divisor (16 bit)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
randmod
	pshs d,x,y
	jsr rand	; puts number on stack	
	jsr mod2b   ; leaves number on stack
	puls y,x,d
	rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;LSR RANDOM NUMBER GENERATOR
;ALL REGISTERS ARE PRESERVED
;number is returned on the user stack
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
rand
	PSHS D,x
	LDB CUR_RAND+1 ; GET RIGHT BYTE
	ANDB LEFT_TAP_MASK ; MASK RAND TO GET LEFT TAP	
	STB LEFT_TAP			;SAVE IT
	LDB CUR_RAND+1		;RELOAD
	ANDB RIGHT_TAP_MASK	; MASK RAND TO GET RIGHT TAP
	;RIGHT TAP IS THE LSB (SO WE DON'T NEED TO SHIFT)
	STB RIGHT_TAP
	LSL RIGHT_TAP	;LEFT JUSTIFY THE RIGHT TAP 
	LSL RIGHT_TAP	;SO THE TWO TAPS CAN BE 
	LSL RIGHT_TAP	;XOR'D AND EASILY
	LSL RIGHT_TAP	;MASKED BACK ONTO THE LEFT
	LSL RIGHT_TAP	;BYTE OF THE RANDOM NUMBER
	LSL RIGHT_TAP
	LSL RIGHT_TAP
	;NOW WE HAVE BOTH TAPS, XOR THEM
	LDA LEFT_TAP
	EORA RIGHT_TAP	
	STA XOR_RSLT
	;NOW SHIFT
	LDD CUR_RAND	;LOAD LEFT BYTE
	LSRA ; PUTS BIT 0 INTO CARRY BIT 
	STA CUR_RAND ; STORE NEW MSB
	BCC @nc
	LDB	CUR_RAND+1	;THERE WAS A CARRY
	LSRB
	ORB ONE_IN_MSB ;  MASK A 1 ONTO THE LEFT MOST BIT
	BRA @ds	 ;  DONE SHIFTING
@nc	
	LDB	CUR_RAND+1 ; JUST SHIFT, NO 1 ON LEFT
	LSRB
@ds STB CUR_RAND+1 	; STORE RIGHT HALF OF NEW RAND
	;NOW MASK THE XOR_RSLT ONTO THE MSB
	LDA CUR_RAND
	ORA XOR_RSLT	; MASK A '1' ONTO THE MSB
	STA CUR_RAND
	;SUBTRACT 1 SINCE THE WORKING RAND CAN'T CONTAIN 0
	LDD CUR_RAND	; RELOAD 2 BYTE VALUE
	SUBD #1		; DEC
	STD RAND			
        ldx CUR_RAND 
	pshu x
	PULS x,D
	RTS	

;DATA FOR RANDOM NUMBER GENERATION
CUR_RAND			.DW 0x0F0F
RAND				.DW 0x0000
ONE_IN_MSB		.DB 0x80
LEFT_TAP_MASK 	.DB 0x80 ; 1000 0000
RIGHT_TAP_MASK 	.DB 0x01 ; 0000 0001
LEFT_TAP  		.DB 0x00
RIGHT_TAP  		.DB 0x00
XOR_RSLT			.BYTE 0x00
OUTPUT
	.DW 0X0000
	.DW 0X0000
	.DW 0X0000
